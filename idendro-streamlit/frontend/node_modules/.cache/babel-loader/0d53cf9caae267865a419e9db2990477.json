{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\nimport * as d3 from 'd3';\nimport * as userfuncs from './userfuncs';\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[\"top\"] = \"top\";\n  Orientation[\"bottom\"] = \"bottom\";\n  Orientation[\"right\"] = \"right\";\n  Orientation[\"left\"] = \"left\";\n})(Orientation || (Orientation = {}));\n\nfunction create_container(dimensions) {\n  if (d3.select(\"#idendro\")) {\n    d3.select(\"#idendro\").remove();\n  } // append svg element to the body of the page\n  // set dimensions and position of the svg element\n\n\n  let svg = d3.select(\"body\").append(\"svg\").attr(\"id\", \"idendro\").attr(\"width\", dimensions.width).attr(\"height\", dimensions.height);\n  let plot = svg.append(\"g\").attr(\"transform\", \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\").attr(\"id\", \"idendro-container\");\n  return plot;\n}\n\nfunction create_axis(plot, dimensions, dendrogram) {\n  let label_limits = dendrogram.x_limits;\n  let value_limits = dendrogram.y_limits;\n  let label_range,\n      value_range = [0, 0];\n  let label_axis_func, value_axis_func;\n  let label_axis_transform = [0, 0];\n  let value_axis_transform = [0, 0]; //handle orientation impact on scale ranges & positioning\n\n  if (dimensions.orientation === Orientation.top || dimensions.orientation === Orientation.bottom) {\n    label_range = [0, dimensions.innerWidth];\n    value_axis_func = d3.axisLeft;\n    value_axis_transform = [0, 0];\n\n    if (dimensions.orientation === Orientation.top) {\n      value_range = [dimensions.innerHeight, 0];\n      label_axis_func = d3.axisBottom;\n      label_axis_transform = [0, dimensions.innerHeight];\n    } else {\n      value_range = [0, dimensions.innerHeight];\n      label_axis_func = d3.axisTop;\n    }\n  } else {\n    value_axis_func = d3.axisBottom;\n    label_range = [dimensions.innerHeight, 0];\n    value_axis_transform = [0, dimensions.innerHeight];\n\n    if (dimensions.orientation === Orientation.left) {\n      value_range = [dimensions.innerWidth, 0];\n      label_axis_func = d3.axisRight;\n      label_axis_transform = [dimensions.innerWidth, 0];\n    } else {\n      value_range = [0, dimensions.innerWidth];\n      label_axis_func = d3.axisLeft;\n    }\n  } //get label-axis positions and labels\n\n\n  let label_axis_pos = dendrogram.axis_labels.map(x => x.x);\n  let label_axis_label = dendrogram.axis_labels.map(x => x.label); //create label-axis\n\n  let labelScale = d3.scaleLinear().domain(label_limits).range(label_range);\n  let labelAxisGenerator = label_axis_func(labelScale).tickValues(label_axis_pos).tickFormat((d, i) => label_axis_label[i]).tickSize(3);\n  plot.append(\"g\").attr(\"id\", \"label-axis\").attr(\"transform\", \"translate(\" + label_axis_transform[0] + \",\" + label_axis_transform[1] + \")\").call(labelAxisGenerator); //create value-axis\n\n  let valueScale = d3.scaleLinear().domain(value_limits).range(value_range);\n  let valueAxisGenerator = value_axis_func(valueScale);\n  plot.append(\"g\").attr(\"id\", \"value-axis\").attr(\"transform\", \"translate(\" + value_axis_transform[0] + \",\" + value_axis_transform[1] + \")\").call(valueAxisGenerator);\n  return [labelScale, valueScale];\n}\n\nfunction draw_links(plot, dimensions, dendrogram, scales) {\n  var xScale;\n  var yScale;\n\n  if (dimensions.orientation === Orientation.top || dimensions.orientation === Orientation.bottom) {\n    xScale = scales[0];\n    yScale = scales[1];\n    dendrogram.links.forEach(link => {\n      link.data = link.x.map(function (x, i) {\n        return {\n          'x': x,\n          'y': link.y[i]\n        };\n      });\n    });\n  } else {\n    yScale = scales[0];\n    xScale = scales[1];\n    dendrogram.links.forEach(link => {\n      link.data = link.x.map(function (x, i) {\n        return {\n          'y': x,\n          'x': link.y[i]\n        };\n      });\n    });\n  }\n\n  plot.selectAll(\".line\").data(dendrogram.links).enter().append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", function (d) {\n    return \"white\";\n  }).attr(\"stroke-width\", 1.5).attr(\"d\", function (d) {\n    return d3.line().x(d => xScale(d.x)).y(function (d) {\n      return yScale(d.y);\n    })(d.data);\n  });\n}\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\n\n\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail;\n  var dendrogram = data.args['data'];\n  console.log(dendrogram);\n  let margin = {\n    top: 50,\n    right: 50,\n    bottom: 50,\n    left: 50\n  };\n  let label_margin_size = data.args['label_margin'];\n  let dimensions = {\n    height: data.args['height'],\n    width: data.args['width'],\n    margin: margin,\n    innerHeight: 0,\n    innerWidth: 0,\n    orientation: data.args['orientation']\n  };\n  let margin_map = {\n    'top': Orientation.bottom,\n    'bottom': Orientation.top,\n    'left': Orientation.right,\n    'right': Orientation.left\n  };\n  let label_margin = margin_map[dimensions.orientation];\n  dimensions.margin[label_margin] = label_margin_size;\n  dimensions.innerHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n  dimensions.innerWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  let plot = create_container(dimensions);\n  let scales = create_axis(plot, dimensions, dendrogram);\n  draw_links(plot, dimensions, dendrogram, scales);\n  userfuncs.postprocess(d3, dimensions, dendrogram);\n  Streamlit.setFrameHeight();\n} // Attach our `onRender` handler to Streamlit's render event.\n\n\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","d3","userfuncs","Orientation","create_container","dimensions","select","remove","svg","append","attr","width","height","plot","margin","left","top","create_axis","dendrogram","label_limits","x_limits","value_limits","y_limits","label_range","value_range","label_axis_func","value_axis_func","label_axis_transform","value_axis_transform","orientation","bottom","innerWidth","axisLeft","innerHeight","axisBottom","axisTop","axisRight","label_axis_pos","axis_labels","map","x","label_axis_label","label","labelScale","scaleLinear","domain","range","labelAxisGenerator","tickValues","tickFormat","d","i","tickSize","call","valueScale","valueAxisGenerator","draw_links","scales","xScale","yScale","links","forEach","link","data","y","selectAll","enter","line","onRender","event","detail","args","console","log","right","label_margin_size","margin_map","label_margin","postprocess","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/home/aurimas/coding/idendro/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport * as d3 from 'd3'\nimport * as userfuncs from './userfuncs'\n\ninterface AxisLabel {\n    x: number\n    label: string\n    labelsize: number\n}\n\ninterface Coord {\n    x: number\n    y: number\n}\n\ninterface ClusterLink {\n    x: number[]\n    y: number[]\n    fillcolor: string\n    size: number\n    data: Coord[]\n}\n\ninterface ClusterNode {\n    x: number\n    y: number\n    edgecolor: string\n    fillcolor: string\n    label: string\n    hovertext: Object[] | string\n    size: number\n    labelsize: number\n    labelcolor: string\n\n}\n\ninterface Dendrogram {\n    axis_labels: AxisLabel[]\n    links: ClusterLink[]\n    nodes: ClusterNode[]\n    x_limits: [number, number]\n    y_limits: [number, number]\n}\n\ninterface Dimensions {\n    margin: Margin\n    height: number\n    width: number\n    innerHeight: number\n    innerWidth: number,\n    orientation: Orientation\n}\n\nenum Orientation {\n    top = \"top\",\n    bottom = \"bottom\",\n    right = \"right\",\n    left = \"left\"\n}\n\ninterface Margin {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\ninterface plot extends d3.Selection<SVGGElement, unknown, HTMLElement, any> {}\n\ninterface scaleLinear extends d3.ScaleLinear<number, number, never> {}\n\nfunction create_container(dimensions: Dimensions): plot {\n\n\n    if (d3.select(\"#idendro\")) {\n        d3.select(\"#idendro\").remove()\n    }\n    // append svg element to the body of the page\n    // set dimensions and position of the svg element\n    let svg = d3\n        .select(\"body\")\n        .append(\"svg\")\n        .attr(\"id\", \"idendro\")\n        .attr(\"width\", dimensions.width)\n        .attr(\"height\", dimensions.height)\n\n    let plot = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\")\n        .attr(\"id\", \"idendro-container\");\n\n    return plot\n}\n\nfunction create_axis(plot: plot, dimensions: Dimensions, dendrogram: Dendrogram) {\n\n    let label_limits = dendrogram.x_limits\n    let value_limits = dendrogram.y_limits\n\n    let label_range, value_range = [0, 0]\n    let label_axis_func, value_axis_func: CallableFunction\n    let label_axis_transform = [0, 0]\n    let value_axis_transform = [0, 0]\n\n    //handle orientation impact on scale ranges & positioning\n    if (dimensions.orientation === Orientation.top || dimensions.orientation === Orientation.bottom) {\n        label_range = [0, dimensions.innerWidth]\n        value_axis_func = d3.axisLeft\n        value_axis_transform = [0, 0]\n        if (dimensions.orientation === Orientation.top) {\n            value_range = [dimensions.innerHeight, 0]\n            label_axis_func = d3.axisBottom\n            label_axis_transform = [0, dimensions.innerHeight]\n        } else {\n            value_range = [0, dimensions.innerHeight]\n            label_axis_func = d3.axisTop\n        }\n    } else {\n        value_axis_func = d3.axisBottom\n        label_range = [dimensions.innerHeight, 0]\n        value_axis_transform = [0, dimensions.innerHeight]\n        if (dimensions.orientation === Orientation.left) {\n            value_range = [dimensions.innerWidth, 0]\n            label_axis_func = d3.axisRight\n            label_axis_transform = [dimensions.innerWidth, 0]\n        } else {            \n            value_range = [0, dimensions.innerWidth]\n            label_axis_func = d3.axisLeft            \n        }\n    }\n\n    //get label-axis positions and labels\n    let label_axis_pos = dendrogram.axis_labels.map((x) => x.x)\n    let label_axis_label = dendrogram.axis_labels.map((x) => x.label)\n\n    //create label-axis\n    let labelScale = d3.scaleLinear()\n        .domain(label_limits).range(label_range)\n\n    let labelAxisGenerator = label_axis_func(labelScale)\n        .tickValues(label_axis_pos)\n        .tickFormat((d, i) => label_axis_label[i])\n        .tickSize(3)\n\n    plot.append(\"g\")\n        .attr(\"id\", \"label-axis\")\n        .attr(\"transform\", \"translate(\" + label_axis_transform[0] + \",\" + label_axis_transform[1] + \")\")\n        .call(labelAxisGenerator)\n\n    //create value-axis\n    let valueScale = d3.scaleLinear()\n        .domain(value_limits).range(value_range)\n\n    let valueAxisGenerator = value_axis_func(valueScale)\n\n    plot.append(\"g\")\n        .attr(\"id\", \"value-axis\")\n        .attr(\"transform\", \"translate(\" + value_axis_transform[0] + \",\" + value_axis_transform[1] + \")\")\n        .call(valueAxisGenerator)\n    \n    return [labelScale, valueScale]\n}\n\nfunction draw_links(plot: plot, dimensions: Dimensions, dendrogram: Dendrogram, scales: scaleLinear[]) {\n\n    var xScale: scaleLinear\n    var yScale: scaleLinear\n\n    if (dimensions.orientation === Orientation.top || dimensions.orientation === Orientation.bottom) {        \n        xScale = scales[0]\n        yScale = scales[1]\n        dendrogram.links.forEach(link => {\n            link.data = link.x.map(function(x, i) { return {'x': x, 'y': link.y[i]} })\n        });\n    } else {\n        yScale = scales[0]\n        xScale = scales[1]        \n        dendrogram.links.forEach(link => {\n            link.data = link.x.map(function(x, i) { return {'y': x, 'x': link.y[i]} })\n        });\n    }    \n\n    plot.selectAll(\".line\")\n      .data(dendrogram.links)\n      .enter()\n      .append(\"path\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", function(d){ return \"white\" })\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"d\", function(d){\n          return d3.line<Coord>()\n            .x((d) => xScale(d.x))\n            .y(function(d) { return yScale(d.y); })\n            (d.data)\n        })\n\n}\n\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n    // Get the RenderData from the event\n    const data = (event as CustomEvent<RenderData>).detail\n\n    var dendrogram: Dendrogram = data.args['data']\n    console.log(dendrogram)\n    let margin: Margin = { top: 50, right: 50, bottom: 50, left: 50 }\n    let label_margin_size = data.args['label_margin']\n    let dimensions: Dimensions = {\n        height: data.args['height'],\n        width: data.args['width'],\n        margin: margin,\n        innerHeight: 0,\n        innerWidth: 0,\n        orientation: data.args['orientation']\n    }\n\n    let margin_map = { 'top': Orientation.bottom, 'bottom': Orientation.top, 'left': Orientation.right, 'right': Orientation.left }\n    let label_margin: Orientation = margin_map[dimensions.orientation]\n\n    dimensions.margin[label_margin] = label_margin_size\n    dimensions.innerHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom\n    dimensions.innerWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right\n\n    let plot = create_container(dimensions)\n    let scales = create_axis(plot, dimensions, dendrogram)\n    \n    draw_links(plot, dimensions, dendrogram, scales)\n\n    userfuncs.postprocess(d3, dimensions, dendrogram)\n    Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}