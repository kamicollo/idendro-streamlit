{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nimport * as Schema_ from '../fb/Schema';\nimport { Visitor } from '../visitor';\nvar Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar List = Schema_.org.apache.arrow.flatbuf.List;\nvar Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nvar FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n/** @ignore */\n\nexport class TypeAssembler extends Visitor {\n  visit(node, builder) {\n    return node == null || builder == null ? undefined : super.visit(node, builder);\n  }\n\n  visitNull(_node, b) {\n    Null.startNull(b);\n    return Null.endNull(b);\n  }\n\n  visitInt(node, b) {\n    Int.startInt(b);\n    Int.addBitWidth(b, node.bitWidth);\n    Int.addIsSigned(b, node.isSigned);\n    return Int.endInt(b);\n  }\n\n  visitFloat(node, b) {\n    FloatingPoint.startFloatingPoint(b);\n    FloatingPoint.addPrecision(b, node.precision);\n    return FloatingPoint.endFloatingPoint(b);\n  }\n\n  visitBinary(_node, b) {\n    Binary.startBinary(b);\n    return Binary.endBinary(b);\n  }\n\n  visitBool(_node, b) {\n    Bool.startBool(b);\n    return Bool.endBool(b);\n  }\n\n  visitUtf8(_node, b) {\n    Utf8.startUtf8(b);\n    return Utf8.endUtf8(b);\n  }\n\n  visitDecimal(node, b) {\n    Decimal.startDecimal(b);\n    Decimal.addScale(b, node.scale);\n    Decimal.addPrecision(b, node.precision);\n    return Decimal.endDecimal(b);\n  }\n\n  visitDate(node, b) {\n    Date.startDate(b);\n    Date.addUnit(b, node.unit);\n    return Date.endDate(b);\n  }\n\n  visitTime(node, b) {\n    Time.startTime(b);\n    Time.addUnit(b, node.unit);\n    Time.addBitWidth(b, node.bitWidth);\n    return Time.endTime(b);\n  }\n\n  visitTimestamp(node, b) {\n    const timezone = node.timezone && b.createString(node.timezone) || undefined;\n    Timestamp.startTimestamp(b);\n    Timestamp.addUnit(b, node.unit);\n\n    if (timezone !== undefined) {\n      Timestamp.addTimezone(b, timezone);\n    }\n\n    return Timestamp.endTimestamp(b);\n  }\n\n  visitInterval(node, b) {\n    Interval.startInterval(b);\n    Interval.addUnit(b, node.unit);\n    return Interval.endInterval(b);\n  }\n\n  visitList(_node, b) {\n    List.startList(b);\n    return List.endList(b);\n  }\n\n  visitStruct(_node, b) {\n    Struct.startStruct_(b);\n    return Struct.endStruct_(b);\n  }\n\n  visitUnion(node, b) {\n    Union.startTypeIdsVector(b, node.typeIds.length);\n    const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n    Union.startUnion(b);\n    Union.addMode(b, node.mode);\n    Union.addTypeIds(b, typeIds);\n    return Union.endUnion(b);\n  }\n\n  visitDictionary(node, b) {\n    const indexType = this.visit(node.indices, b);\n    DictionaryEncoding.startDictionaryEncoding(b);\n    DictionaryEncoding.addId(b, new Long(node.id, 0));\n    DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n\n    if (indexType !== undefined) {\n      DictionaryEncoding.addIndexType(b, indexType);\n    }\n\n    return DictionaryEncoding.endDictionaryEncoding(b);\n  }\n\n  visitFixedSizeBinary(node, b) {\n    FixedSizeBinary.startFixedSizeBinary(b);\n    FixedSizeBinary.addByteWidth(b, node.byteWidth);\n    return FixedSizeBinary.endFixedSizeBinary(b);\n  }\n\n  visitFixedSizeList(node, b) {\n    FixedSizeList.startFixedSizeList(b);\n    FixedSizeList.addListSize(b, node.listSize);\n    return FixedSizeList.endFixedSizeList(b);\n  }\n\n  visitMap(node, b) {\n    Map_.startMap(b);\n    Map_.addKeysSorted(b, node.keysSorted);\n    return Map_.endMap(b);\n  }\n\n}\n/** @ignore */\n\nexport const instance = new TypeAssembler();","map":{"version":3,"sources":["visitor/typeassembler.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n"]},"metadata":{},"sourceType":"module"}