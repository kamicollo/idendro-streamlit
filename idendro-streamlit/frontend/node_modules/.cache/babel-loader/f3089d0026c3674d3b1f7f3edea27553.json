{"ast":null,"code":"import _asyncToGenerator from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _construct from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nvar _excluded = [\"values\"];\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\nimport * as fn from '../util/fn';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder } from '../builder';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n/** @nocollapse */\n\nVector.new = newVector;\n/** @nocollapse */\n\nVector.from = vectorFrom;\n/** @ignore */\n\nfunction newVector(data) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return _construct(getVectorConstructor.getVisitFn(data)(), [data].concat(args));\n}\n/** @ignore */\n\n\nexport function vectorFromValuesWithType(newDataType, input) {\n  if (isIterable(input)) {\n    return Vector.from({\n      'nullValues': [null, undefined],\n      type: newDataType(),\n      'values': input\n    });\n  } else if (isAsyncIterable(input)) {\n    return Vector.from({\n      'nullValues': [null, undefined],\n      type: newDataType(),\n      'values': input\n    });\n  }\n\n  var _input = _objectSpread({}, input),\n      _input$values = _input['values'],\n      values = _input$values === void 0 ? [] : _input$values,\n      _input$type = _input['type'],\n      type = _input$type === void 0 ? newDataType() : _input$type,\n      _input$nullValues = _input['nullValues'],\n      nullValues = _input$nullValues === void 0 ? [null, undefined] : _input$nullValues;\n\n  return isIterable(values) ? Vector.from(_objectSpread(_objectSpread({\n    nullValues: nullValues\n  }, input), {}, {\n    type: type\n  })) : Vector.from(_objectSpread(_objectSpread({\n    nullValues: nullValues\n  }, input), {}, {\n    type: type\n  }));\n}\n\nfunction vectorFrom(input) {\n  var _nullValues$input = _objectSpread({\n    'nullValues': [null, undefined]\n  }, input),\n      _nullValues$input$val = _nullValues$input['values'],\n      values = _nullValues$input$val === void 0 ? [] : _nullValues$input$val,\n      options = _objectWithoutProperties(_nullValues$input, _excluded);\n\n  if (isIterable(values)) {\n    var chunks = _toConsumableArray(Builder.throughIterable(options)(values));\n\n    return chunks.length === 1 ? chunks[0] : Chunked.concat(chunks);\n  }\n\n  return function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(chunks) {\n      var transform, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              transform = Builder.throughAsyncIterable(options);\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(transform(values));\n\n            case 5:\n              _context.next = 7;\n              return _iterator.next();\n\n            case 7:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 13;\n                break;\n              }\n\n              chunk = _step.value;\n              chunks.push(chunk);\n\n            case 10:\n              _iteratorAbruptCompletion = false;\n              _context.next = 5;\n              break;\n\n            case 13:\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 19:\n              _context.prev = 19;\n              _context.prev = 20;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 24;\n                break;\n              }\n\n              _context.next = 24;\n              return _iterator.return();\n\n            case 24:\n              _context.prev = 24;\n\n              if (!_didIteratorError) {\n                _context.next = 27;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 27:\n              return _context.finish(24);\n\n            case 28:\n              return _context.finish(19);\n\n            case 29:\n              return _context.abrupt(\"return\", chunks.length === 1 ? chunks[0] : Chunked.concat(chunks));\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 15, 19, 29], [20,, 24, 28]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()([]);\n} //\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\n\nBaseVector.prototype.get = function baseVectorGet(index) {\n  return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet(index, value) {\n  return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {\n  return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray() {\n  return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {\n  return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {\n  return iteratorVisitor.visit(this);\n};\n\nBaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors; // Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n\nObject.keys(Type).map(function (T) {\n  return Type[T];\n}).filter(function (T) {\n  return typeof T === 'number';\n}).filter(function (typeId) {\n  return typeId !== Type.NONE;\n}).forEach(function (typeId) {\n  var VectorCtor = getVectorConstructor.visit(typeId);\n  VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n  VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n});\n/** @ignore */\n\nfunction partialType0(visit) {\n  return function () {\n    return visit(this.type);\n  };\n}\n/** @ignore */\n\n\nfunction wrapNullableGet(fn) {\n  return function (i) {\n    return this.isValid(i) ? fn.call(this, i) : null;\n  };\n}\n/** @ignore */\n\n\nfunction wrapNullableSet(fn) {\n  return function (i, a) {\n    if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n      fn.call(this, i, a);\n    }\n  };\n}\n/** @ignore */\n\n\nfunction bindBaseVectorDataAccessors() {\n  var nullBitmap = this.nullBitmap;\n\n  if (nullBitmap && nullBitmap.byteLength > 0) {\n    this.get = wrapNullableGet(this.get);\n    this.set = wrapNullableSet(this.set);\n  }\n}","map":{"version":3,"sources":["vector/index.ts"],"names":[],"mappings":";;;;;;;+CACA,oJ;;;;;;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAS,MAAT,QAAuB,WAAvB;AACA,SAAS,UAAT,QAA2B,QAA3B;AACA,SAAS,YAAT,QAA6B,UAA7B;AACA,SAAS,UAAT,QAA2B,QAA3B;AACA,SAAS,OAAT,QAAwB,WAAxB;AACA,SAAS,UAAT,EAAqB,aAArB,EAAoC,qBAApC,QAAiE,QAAjE;AACA,SAAS,aAAT,QAA8B,WAA9B;AACA,SAAS,gBAAT,QAAiC,cAAjC;AACA,SAAS,qBAAT,QAAsC,mBAAtC;AACA,SAAS,mBAAT,QAAoC,iBAApC;AACA,SAAS,WAAT,EAAsB,aAAtB,EAAqC,aAArC,EAAoD,aAApD,QAAyE,SAAzE;AACA,SAAS,cAAT,EAAyB,qBAAzB,EAAgD,uBAAhD,QAA+E,YAA/E;AACA,SAAS,SAAT,EAAoB,UAApB,EAAgC,WAAhC,EAA6C,WAA7C,EAA0D,WAA1D,EAAuE,WAAvE,EAAoF,YAApF,EAAkG,YAAlG,EAAgH,YAAhH,QAAoI,OAApI;AACA,SAAS,UAAT,QAA2B,QAA3B;AACA,SAAS,SAAT,QAA0B,OAA1B;AACA,SAAS,UAAT,QAA2B,QAA3B;AACA,SAAS,YAAT,QAA6B,UAA7B;AACA,SAAS,eAAT,EAA0B,qBAA1B,EAAiD,0BAAjD,EAA6E,0BAA7E,EAAyG,yBAAzG,QAA0I,aAA1I;AACA,SAAS,UAAT,EAAqB,gBAArB,EAAuC,qBAAvC,EAA8D,qBAA9D,EAAqF,oBAArF,QAAiH,QAAjH;AACA,SAAS,WAAT,EAAsB,gBAAtB,EAAwC,iBAAxC,QAAiE,SAAjE;AACA,SAAS,UAAT,QAA2B,QAA3B;AACA,SAAS,MAAT,EAAiB,SAAjB,QAAkC,OAAlC;AAEA,OAAO,KAAK,EAAZ,MAAoB,YAApB;AAEA,SAAS,IAAT,QAAqB,SAArB;AACA,SAAS,MAAT,QAAuB,WAAvB;AAEA,SAAS,OAAT,QAAwB,WAAxB;AACA,SAAS,UAAT,QAA2B,QAA3B;AACA,SAAS,OAAT,QAAwB,aAAxB;AACA,SAAS,UAAT,EAAqB,eAArB,QAA4C,gBAA5C;AACA,SAAS,OAAT,QAAgD,YAAhD;AAEA,SAAS,QAAQ,IAAI,UAArB,QAAuC,gBAAvC;AACA,SAAS,QAAQ,IAAI,UAArB,QAAuC,gBAAvC;AACA,SAAS,QAAQ,IAAI,cAArB,QAA2C,oBAA3C;AACA,SAAS,QAAQ,IAAI,cAArB,QAA2C,oBAA3C;AACA,SAAS,QAAQ,IAAI,eAArB,QAA4C,qBAA5C;AACA,SAAS,QAAQ,IAAI,gBAArB,QAA6C,sBAA7C;AACA,SAAS,QAAQ,IAAI,oBAArB,QAAiD,uBAAjD;AAuBA;;AACA,MAAM,CAAC,GAAP,GAAa,SAAb;AAEA;;AACA,MAAM,CAAC,IAAP,GAAc,UAAd;AAEA;;AACA,SAAS,SAAT,CAAuC,IAAvC,EAAmF;EAAA,kCAA1B,IAA0B;IAA1B,IAA0B;EAAA;;EAC/E,kBAAY,oBAAoB,CAAC,UAArB,CAAmC,IAAnC,GAAZ,GAAwD,IAAxD,SAAiE,IAAjE;AACH;AAOD;;;AACA,OAAM,SAAU,wBAAV,CAAoE,WAApE,EAA0F,KAA1F,EAA0O;EAC5O,IAAI,UAAU,CAAC,KAAD,CAAd,EAAuB;IACnB,OAAO,MAAM,CAAC,IAAP,CAAY;MAAE,cAAc,CAAC,IAAD,EAAO,SAAP,CAAhB;MAAmC,IAAI,EAAE,WAAW,EAApD;MAAwD,UAAU;IAAlE,CAAZ,CAAP;EACH,CAFD,MAEO,IAAI,eAAe,CAAC,KAAD,CAAnB,EAA4B;IAC/B,OAAO,MAAM,CAAC,IAAP,CAAY;MAAE,cAAc,CAAC,IAAD,EAAO,SAAP,CAAhB;MAAmC,IAAI,EAAE,WAAW,EAApD;MAAwD,UAAU;IAAlE,CAAZ,CAAP;EACH;;EACD,+BAIS,KAJT;EAAA,2BACI,QADJ;EAAA,IACc,MADd,8BACuB,EADvB;EAAA,yBAEI,MAFJ;EAAA,IAEY,IAFZ,4BAEmB,WAAW,EAF9B;EAAA,+BAGI,YAHJ;EAAA,IAGkB,UAHlB,kCAG+B,CAAC,IAAD,EAAO,SAAP,CAH/B;;EAKA,OAAO,UAAU,CAAC,MAAD,CAAV,GACD,MAAM,CAAC,IAAP;IAAc,UAAU,EAAV;EAAd,GAA6B,KAA7B;IAAoC,IAAI,EAAJ;EAApC,GADC,GAED,MAAM,CAAC,IAAP;IAAc,UAAU,EAAV;EAAd,GAA6B,KAA7B;IAAoC,IAAI,EAAJ;EAApC,GAFN;AAGH;;AAKD,SAAS,UAAT,CAA2D,KAA3D,EAAsI;EAClI;IAAgD,cAAc,CAAC,IAAD,EAAO,SAAP;EAA9D,GAAoF,KAApF;EAAA,8CAAQ,QAAR;EAAA,IAAkB,MAAlB,sCAA2B,EAA3B;EAAA,IAAkC,OAAlC;;EACA,IAAI,UAAU,CAAsB,MAAtB,CAAd,EAA6C;IACzC,IAAM,MAAM,sBAAO,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,MAAjC,CAAP,CAAZ;;IACA,OAAO,MAAM,CAAC,MAAP,KAAkB,CAAlB,GAAsB,MAAM,CAAC,CAAD,CAA5B,GAAkC,OAAO,CAAC,MAAR,CAAkB,MAAlB,CAAzC;EACH;;EACD,OAAO;IAAA,sEAAC,iBAAO,MAAP;MAAA;;MAAA;QAAA;UAAA;YAAA;cACE,SADF,GACc,OAAO,CAAC,oBAAR,CAA6B,OAA7B,CADd;cAAA;cAAA;cAAA;cAAA,2BAEsB,SAAS,CAAC,MAAD,CAF/B;;YAAA;cAAA;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAEa,KAFb;cAGA,MAAM,CAAC,IAAP,CAAY,KAAZ;;YAHA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;cAAA;;YAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;;YAAA;cAAA;;YAAA;cAAA,iCAKG,MAAM,CAAC,MAAP,KAAkB,CAAlB,GAAsB,MAAM,CAAC,CAAD,CAA5B,GAAkC,OAAO,CAAC,MAAR,CAAkB,MAAlB,CALrC;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAD;;IAAA;MAAA;IAAA;EAAA,IAMJ,EANI,CAAP;AAOH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,UAAU,CAAC,SAAX,CAAqB,GAArB,GAA2B,SAAS,aAAT,CAAgE,KAAhE,EAA6E;EACpG,OAAO,UAAU,CAAC,KAAX,CAAiB,IAAjB,EAAuB,KAAvB,CAAP;AACH,CAFD;;AAIA,UAAU,CAAC,SAAX,CAAqB,GAArB,GAA2B,SAAS,aAAT,CAAgE,KAAhE,EAA+E,KAA/E,EAAwG;EAC/H,OAAO,UAAU,CAAC,KAAX,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,CAAP;AACH,CAFD;;AAIA,UAAU,CAAC,SAAX,CAAqB,OAArB,GAA+B,SAAS,iBAAT,CAAoE,KAApE,EAA+F,SAA/F,EAAiH;EAC5I,OAAO,cAAc,CAAC,KAAf,CAAqB,IAArB,EAA2B,KAA3B,EAAkC,SAAlC,CAAP;AACH,CAFD;;AAIA,UAAU,CAAC,SAAX,CAAqB,OAArB,GAA+B,SAAS,iBAAT,GAA0B;EACrD,OAAO,cAAc,CAAC,KAAf,CAAqB,IAArB,CAAP;AACH,CAFD;;AAIA,UAAU,CAAC,SAAX,CAAqB,YAArB,GAAoC,SAAS,sBAAT,GAA+B;EAC/D,OAAO,gBAAgB,CAAC,KAAjB,CAAuB,KAAK,IAA5B,CAAP;AACH,CAFD;;AAIA,UAAU,CAAC,SAAX,CAAqB,MAAM,CAAC,QAA5B,IAAwC,SAAS,wBAAT,GAAiC;EACrE,OAAO,eAAe,CAAC,KAAhB,CAAsB,IAAtB,CAAP;AACH,CAFD;;AAIC,UAAU,CAAC,SAAX,CAA6B,kBAA7B,GAAkD,2BAAlD,C,CAED;;AACC,MAAM,CAAC,IAAP,CAAY,IAAZ,EACI,GADJ,CACQ,UAAC,CAAD;EAAA,OAAY,IAAI,CAAC,CAAD,CAAhB;AAAA,CADR,EAEI,MAFJ,CAEW,UAAC,CAAD;EAAA,OAAuB,OAAO,CAAP,KAAa,QAApC;AAAA,CAFX,EAGI,MAHJ,CAGW,UAAC,MAAD;EAAA,OAAY,MAAM,KAAK,IAAI,CAAC,IAA5B;AAAA,CAHX,EAII,OAJJ,CAIY,UAAC,MAAD,EAAW;EAChB,IAAM,UAAU,GAAG,oBAAoB,CAAC,KAArB,CAA2B,MAA3B,CAAnB;EACA,UAAU,CAAC,SAAX,CAAqB,KAArB,IAA8B,EAAE,CAAC,QAAH,CAAY,UAAU,CAAC,UAAX,CAAsB,MAAtB,CAAZ,CAA9B;EACA,UAAU,CAAC,SAAX,CAAqB,KAArB,IAA8B,EAAE,CAAC,QAAH,CAAY,UAAU,CAAC,UAAX,CAAsB,MAAtB,CAAZ,CAA9B;EACA,UAAU,CAAC,SAAX,CAAqB,SAArB,IAAkC,EAAE,CAAC,QAAH,CAAY,cAAc,CAAC,UAAf,CAA0B,MAA1B,CAAZ,CAAlC;EACA,UAAU,CAAC,SAAX,CAAqB,SAArB,IAAkC,EAAE,CAAC,QAAH,CAAY,cAAc,CAAC,UAAf,CAA0B,MAA1B,CAAZ,CAAlC;EACA,UAAU,CAAC,SAAX,CAAqB,cAArB,IAAuC,YAAY,CAAC,gBAAgB,CAAC,UAAjB,CAA4B,MAA5B,CAAD,CAAnD;EACA,UAAU,CAAC,SAAX,CAAqB,MAAM,CAAC,QAA5B,IAAwC,EAAE,CAAC,QAAH,CAAY,eAAe,CAAC,UAAhB,CAA2B,MAA3B,CAAZ,CAAxC;AACH,CAZJ;AAcD;;AACA,SAAS,YAAT,CAAwC,KAAxC,EAAuE;EACnE,OAAO,YAAA;IAAoB,OAAO,KAAK,CAAC,KAAK,IAAN,CAAZ;EAA0B,CAArD;AACH;AAED;;;AACA,SAAS,eAAT,CAAgG,EAAhG,EAAqG;EACjG,OAAO,UAAkB,CAAlB,EAA2B;IAAI,OAAO,KAAK,OAAL,CAAa,CAAb,IAAkB,EAAE,CAAC,IAAH,CAAQ,IAAR,EAAc,CAAd,CAAlB,GAAqC,IAA5C;EAAmD,CAAzF;AACH;AAED;;;AACA,SAAS,eAAT,CAA6G,EAA7G,EAAkH;EAC9G,OAAO,UAAkB,CAAlB,EAA6B,CAA7B,EAAmC;IACtC,IAAI,OAAO,CAAC,KAAK,UAAN,EAAkB,KAAK,MAAL,GAAc,CAAhC,EAAmC,EAAE,CAAC,KAAK,IAAN,IAAc,CAAC,KAAK,SAAtB,CAAnC,CAAX,EAAiF;MAC7E,EAAE,CAAC,IAAH,CAAQ,IAAR,EAAc,CAAd,EAAiB,CAAjB;IACH;EACJ,CAJD;AAKH;AAED;;;AACA,SAAS,2BAAT,GAAoC;EAChC,IAAM,UAAU,GAAG,KAAK,UAAxB;;EACA,IAAI,UAAU,IAAI,UAAU,CAAC,UAAX,GAAwB,CAA1C,EAA6C;IACzC,KAAK,GAAL,GAAW,eAAe,CAAC,KAAK,GAAN,CAA1B;IACA,KAAK,GAAL,GAAW,eAAe,CAAC,KAAK,GAAN,CAA1B;EACH;AACJ","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}