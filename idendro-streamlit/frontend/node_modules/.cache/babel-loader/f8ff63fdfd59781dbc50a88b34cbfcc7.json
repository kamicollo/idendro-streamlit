{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\nimport * as d3 from 'd3';\n\nfunction create_container() {\n  let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 960;\n  let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n  let margin = {\n    top: 20,\n    right: 10,\n    bottom: 20,\n    left: 10\n  },\n      outerWidth = width,\n      outerHeight = height,\n      innerWidth = outerWidth - margin.left - margin.right,\n      innerHeight = outerHeight - margin.top - margin.bottom; // append svg element to the body of the page\n  // set dimensions and position of the svg element\n\n  let svg = d3.select(\"body\").append(\"svg\").attr(\"id\", \"idendro\").attr(\"width\", outerWidth).attr(\"height\", outerHeight);\n  let plot = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"id\", \"idendro-container\");\n  return {\n    'svg': svg,\n    'plot': plot,\n    'innerWidth': innerWidth,\n    'innerHeight': innerHeight\n  };\n}\n\nfunction create_axis(plot) {\n  //create X-axis\n  var innerHeight = 100;\n  var innerWidth = 200;\n  var xScale = d3.scaleLinear();\n  xScale.domain([0, 9]).range([0, innerWidth]);\n  var xAxis = d3.axisBottom().scale(xScale); //create y-axis\n\n  var yScale = d3.scaleLinear();\n  yScale.domain([0, max_count]).range([innerHeight, 0]);\n  var yAxis = d3.axisLeft().scale(yScale); //add X-axis to plot\n\n  let xg = plot.append(\"g\").attr(\"id\", \"x-axis-lines\").attr(\"transform\", \"translate(0,\" + innerHeight + \")\").call(xAxis); //add Y-axis to plot\n\n  let yg = plot.append(\"g\").attr(\"id\", \"y-axis-lines\") //.attr(\"transform\", \"translate(\" + padding.left + \",0)\")\n  .call(yAxis);\n}\n\nlet isFocused = false;\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\n\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail; // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n\n  console.log(data.args);\n  let name = data.args[\"name\"]; // Show \"Hello, name!\" with a non-breaking space afterwards.\n\n  textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160);\n  Streamlit.setFrameHeight();\n} // Attach our `onRender` handler to Streamlit's render event.\n\n\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","d3","create_container","width","height","margin","top","right","bottom","left","outerWidth","outerHeight","innerWidth","innerHeight","svg","select","append","attr","plot","create_axis","xScale","scaleLinear","domain","range","xAxis","axisBottom","scale","yScale","max_count","yAxis","axisLeft","xg","call","yg","isFocused","onRender","event","data","detail","console","log","args","name","textNode","textContent","String","fromCharCode","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/home/aurimas/coding/idendro/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport * as d3 from 'd3'\n\nfunction create_container(width=960, height=500) {\n    let margin = {top: 20, right: 10, bottom: 20, left: 10},\n    outerWidth = width,\n    outerHeight = height,\n    innerWidth = outerWidth - margin.left - margin.right,\n    innerHeight = outerHeight - margin.top - margin.bottom\n\n    // append svg element to the body of the page\n    // set dimensions and position of the svg element\n    let svg = d3\n        .select(\"body\")\n        .append(\"svg\")\n        .attr(\"id\", \"idendro\")\n        .attr(\"width\", outerWidth)\n        .attr(\"height\", outerHeight)\n\n    let plot = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n        .attr(\"id\", \"idendro-container\");\n\n    return {'svg': svg, 'plot': plot, 'innerWidth': innerWidth, 'innerHeight': innerHeight}\n}\n\nfunction create_axis(plot: d3.Selection<SVGGElement, unknown, HTMLElement, any>) {\n    //create X-axis\n\n    var innerHeight = 100\n    var innerWidth = 200\n\n    var xScale = d3.scaleLinear()        \n    xScale.domain([0,9]).range([0, innerWidth])\n    var xAxis = d3.axisBottom().scale(xScale)                \n    \n    //create y-axis\n    var yScale = d3.scaleLinear()\n    yScale.domain([0, max_count]).range([innerHeight, 0])\n    var yAxis = d3.axisLeft().scale(yScale)\n\n    //add X-axis to plot\n    let xg = plot.append(\"g\")\n        .attr(\"id\", \"x-axis-lines\")            \n        .attr(\"transform\", \"translate(0,\" + innerHeight + \")\")\n        .call(xAxis)\n\n    //add Y-axis to plot\n    let yg = plot.append(\"g\")\n    .attr(\"id\", \"y-axis-lines\")            \n    //.attr(\"transform\", \"translate(\" + padding.left + \",0)\")\n    .call(yAxis)\n}\n\nlet isFocused = false\n\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  console.log(data.args)\n  let name = data.args[\"name\"]\n\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n  textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160)\n\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"AAAA,SAASA,SAAT,QAAsC,yBAAtC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,SAASC,gBAAT,GAAiD;EAAA,IAAvBC,KAAuB,uEAAjB,GAAiB;EAAA,IAAZC,MAAY,uEAAL,GAAK;EAC7C,IAAIC,MAAM,GAAG;IAACC,GAAG,EAAE,EAAN;IAAUC,KAAK,EAAE,EAAjB;IAAqBC,MAAM,EAAE,EAA7B;IAAiCC,IAAI,EAAE;EAAvC,CAAb;EAAA,IACAC,UAAU,GAAGP,KADb;EAAA,IAEAQ,WAAW,GAAGP,MAFd;EAAA,IAGAQ,UAAU,GAAGF,UAAU,GAAGL,MAAM,CAACI,IAApB,GAA2BJ,MAAM,CAACE,KAH/C;EAAA,IAIAM,WAAW,GAAGF,WAAW,GAAGN,MAAM,CAACC,GAArB,GAA2BD,MAAM,CAACG,MAJhD,CAD6C,CAO7C;EACA;;EACA,IAAIM,GAAG,GAAGb,EAAE,CACPc,MADK,CACE,MADF,EAELC,MAFK,CAEE,KAFF,EAGLC,IAHK,CAGA,IAHA,EAGM,SAHN,EAILA,IAJK,CAIA,OAJA,EAISP,UAJT,EAKLO,IALK,CAKA,QALA,EAKUN,WALV,CAAV;EAOA,IAAIO,IAAI,GAAGJ,GAAG,CAACE,MAAJ,CAAW,GAAX,EACNC,IADM,CACD,WADC,EACY,eAAeZ,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GAD5D,EAENW,IAFM,CAED,IAFC,EAEK,mBAFL,CAAX;EAIA,OAAO;IAAC,OAAOH,GAAR;IAAa,QAAQI,IAArB;IAA2B,cAAcN,UAAzC;IAAqD,eAAeC;EAApE,CAAP;AACH;;AAED,SAASM,WAAT,CAAqBD,IAArB,EAAiF;EAC7E;EAEA,IAAIL,WAAW,GAAG,GAAlB;EACA,IAAID,UAAU,GAAG,GAAjB;EAEA,IAAIQ,MAAM,GAAGnB,EAAE,CAACoB,WAAH,EAAb;EACAD,MAAM,CAACE,MAAP,CAAc,CAAC,CAAD,EAAG,CAAH,CAAd,EAAqBC,KAArB,CAA2B,CAAC,CAAD,EAAIX,UAAJ,CAA3B;EACA,IAAIY,KAAK,GAAGvB,EAAE,CAACwB,UAAH,GAAgBC,KAAhB,CAAsBN,MAAtB,CAAZ,CAR6E,CAU7E;;EACA,IAAIO,MAAM,GAAG1B,EAAE,CAACoB,WAAH,EAAb;EACAM,MAAM,CAACL,MAAP,CAAc,CAAC,CAAD,EAAIM,SAAJ,CAAd,EAA8BL,KAA9B,CAAoC,CAACV,WAAD,EAAc,CAAd,CAApC;EACA,IAAIgB,KAAK,GAAG5B,EAAE,CAAC6B,QAAH,GAAcJ,KAAd,CAAoBC,MAApB,CAAZ,CAb6E,CAe7E;;EACA,IAAII,EAAE,GAAGb,IAAI,CAACF,MAAL,CAAY,GAAZ,EACJC,IADI,CACC,IADD,EACO,cADP,EAEJA,IAFI,CAEC,WAFD,EAEc,iBAAiBJ,WAAjB,GAA+B,GAF7C,EAGJmB,IAHI,CAGCR,KAHD,CAAT,CAhB6E,CAqB7E;;EACA,IAAIS,EAAE,GAAGf,IAAI,CAACF,MAAL,CAAY,GAAZ,EACRC,IADQ,CACH,IADG,EACG,cADH,EAET;EAFS,CAGRe,IAHQ,CAGHH,KAHG,CAAT;AAIH;;AAED,IAAIK,SAAS,GAAG,KAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAsC;EACpC;EACA,MAAMC,IAAI,GAAID,KAAD,CAAmCE,MAAhD,CAFoC,CAIpC;EACA;;EACAC,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,IAAjB;EACA,IAAIC,IAAI,GAAGL,IAAI,CAACI,IAAL,CAAU,MAAV,CAAX,CAPoC,CASpC;;EACAE,QAAQ,CAACC,WAAT,GAAwB,UAASF,IAAK,IAAf,GAAqBG,MAAM,CAACC,YAAP,CAAoB,GAApB,CAA5C;EAEA9C,SAAS,CAAC+C,cAAV;AACD,C,CAED;;;AACA/C,SAAS,CAACgD,MAAV,CAAiBC,gBAAjB,CAAkCjD,SAAS,CAACkD,YAA5C,EAA0Df,QAA1D,E,CAEA;AACA;;AACAnC,SAAS,CAACmD,iBAAV,G,CAEA;AACA;;AACAnD,SAAS,CAAC+C,cAAV"},"metadata":{},"sourceType":"module"}