{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _possibleConstructorReturn from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { valueToString } from '../util/pretty';\n/** @ignore */\n\nvar kParent = Symbol.for('parent');\n/** @ignore */\n\nvar kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\n\nvar kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */\n\nvar kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */\n\nvar kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nvar Row = /*#__PURE__*/function (_Symbol$iterator) {\n  function Row(parent, numKeys) {\n    _classCallCheck(this, Row);\n\n    this[kParent] = parent;\n    this.size = numKeys;\n  }\n\n  _createClass(Row, [{\n    key: \"entries\",\n    value: function entries() {\n      return this[Symbol.iterator]();\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return this.get(key) !== undefined;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var val = undefined;\n\n      if (key !== null && key !== undefined) {\n        var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        var idx = ktoi.get(key);\n\n        if (idx !== undefined) {\n          var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n          (val = itov[idx]) !== undefined || (itov[idx] = val = this.getValue(idx));\n        } else if ((idx = this.getIndex(key)) > -1) {\n          ktoi.set(key, idx);\n\n          var _itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n          (val = _itov[idx]) !== undefined || (_itov[idx] = val = this.getValue(idx));\n        }\n      }\n\n      return val;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, val) {\n      if (key !== null && key !== undefined) {\n        var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        var idx = ktoi.get(key);\n\n        if (idx === undefined) {\n          ktoi.set(key, idx = this.getIndex(key));\n        }\n\n        if (idx > -1) {\n          var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n          itov[idx] = this.setValue(idx, val);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      throw new Error(\"Clearing \".concat(this[Symbol.toStringTag], \" not supported.\"));\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(_) {\n      throw new Error(\"Deleting \".concat(this[Symbol.toStringTag], \" values not supported.\"));\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      var ki, vi, ktoi, itov, k, v, i, kr, vr;\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              ki = this.keys();\n              vi = this.values();\n              ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n              itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n              i = 0;\n\n            case 5:\n              if ((kr = ki.next()).done || (vr = vi.next()).done) {\n                _context.next = 15;\n                break;\n              }\n\n              k = kr.value;\n              v = vr.value;\n              itov[i] = v;\n              ktoi.has(k) || ktoi.set(k, i);\n              _context.next = 12;\n              return [k, v];\n\n            case 12:\n              ++i;\n              _context.next = 5;\n              break;\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"forEach\",\n    value: function forEach(callbackfn, thisArg) {\n      var ki = this.keys();\n      var vi = this.values();\n      var callback = thisArg === undefined ? callbackfn : function (v, k, m) {\n        return callbackfn.call(thisArg, v, k, m);\n      };\n      var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n      var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n      for (var k, v, i = 0, kr, vr; !((kr = ki.next()).done || (vr = vi.next()).done); ++i) {\n        k = kr.value;\n        v = vr.value;\n        itov[i] = v;\n        ktoi.has(k) || ktoi.set(k, i);\n        callback(v, k, this);\n      }\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return _toConsumableArray(this.values());\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var obj = {};\n      this.forEach(function (val, key) {\n        return obj[key] = val;\n      });\n      return obj;\n    }\n  }, {\n    key: \"inspect\",\n    value: function inspect() {\n      return this.toString();\n    }\n  }, {\n    key: kCustomInspect,\n    value: function value() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var str = [];\n      this.forEach(function (val, key) {\n        key = valueToString(key);\n        val = valueToString(val);\n        str.push(\"\".concat(key, \": \").concat(val));\n      });\n      return \"{ \".concat(str.join(', '), \" }\");\n    }\n  }]);\n\n  return Row;\n}(Symbol.iterator);\n\nRow[Symbol.toStringTag] = function (proto) {\n  var _Object$definePropert;\n\n  Object.defineProperties(proto, (_Object$definePropert = {\n    'size': {\n      writable: true,\n      enumerable: false,\n      configurable: false,\n      value: 0\n    }\n  }, _defineProperty(_Object$definePropert, kParent, {\n    writable: true,\n    enumerable: false,\n    configurable: false,\n    value: null\n  }), _defineProperty(_Object$definePropert, kRowIndex, {\n    writable: true,\n    enumerable: false,\n    configurable: false,\n    value: -1\n  }), _Object$definePropert));\n  return proto[Symbol.toStringTag] = 'Row';\n}(Row.prototype);\n\nexport var MapRow = /*#__PURE__*/function (_Row) {\n  _inherits(MapRow, _Row);\n\n  var _super = _createSuper(MapRow);\n\n  function MapRow(slice) {\n    var _this;\n\n    _classCallCheck(this, MapRow);\n\n    _this = _super.call(this, slice, slice.length);\n    return _possibleConstructorReturn(_this, createRowProxy(_assertThisInitialized(_this)));\n  }\n\n  _createClass(MapRow, [{\n    key: \"keys\",\n    value: function keys() {\n      return this[kParent].getChildAt(0)[Symbol.iterator]();\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      return this[kParent].getChildAt(1)[Symbol.iterator]();\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(idx) {\n      return this[kParent].getChildAt(0).get(idx);\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(key) {\n      return this[kParent].getChildAt(0).indexOf(key);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(index) {\n      return this[kParent].getChildAt(1).get(index);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      this[kParent].getChildAt(1).set(index, value);\n    }\n  }]);\n\n  return MapRow;\n}(Row);\nexport var StructRow = /*#__PURE__*/function (_Row2) {\n  _inherits(StructRow, _Row2);\n\n  var _super2 = _createSuper(StructRow);\n\n  function StructRow(parent) {\n    var _this2;\n\n    _classCallCheck(this, StructRow);\n\n    _this2 = _super2.call(this, parent, parent.type.children.length);\n    return _possibleConstructorReturn(_this2, defineRowProxyProperties(_assertThisInitialized(_this2)));\n  }\n\n  _createClass(StructRow, [{\n    key: \"keys\",\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function keys() {\n      var _iterator, _step, field;\n\n      return _regeneratorRuntime().wrap(function keys$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(this[kParent].type.children);\n              _context2.prev = 1;\n\n              _iterator.s();\n\n            case 3:\n              if ((_step = _iterator.n()).done) {\n                _context2.next = 9;\n                break;\n              }\n\n              field = _step.value;\n              _context2.next = 7;\n              return field.name;\n\n            case 7:\n              _context2.next = 3;\n              break;\n\n            case 9:\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](1);\n\n              _iterator.e(_context2.t0);\n\n            case 14:\n              _context2.prev = 14;\n\n              _iterator.f();\n\n              return _context2.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, keys, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"values\",\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function values() {\n      var _iterator2, _step2, field;\n\n      return _regeneratorRuntime().wrap(function values$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(this[kParent].type.children);\n              _context3.prev = 1;\n\n              _iterator2.s();\n\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context3.next = 9;\n                break;\n              }\n\n              field = _step2.value;\n              _context3.next = 7;\n              return this[field.name];\n\n            case 7:\n              _context3.next = 3;\n              break;\n\n            case 9:\n              _context3.next = 14;\n              break;\n\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](1);\n\n              _iterator2.e(_context3.t0);\n\n            case 14:\n              _context3.prev = 14;\n\n              _iterator2.f();\n\n              return _context3.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, values, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"getKey\",\n    value: function getKey(idx) {\n      return this[kParent].type.children[idx].name;\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(key) {\n      return this[kParent].type.children.findIndex(function (f) {\n        return f.name === key;\n      });\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(index) {\n      return this[kParent].getChildAt(index).get(this[kRowIndex]);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      return this[kParent].getChildAt(index).set(this[kRowIndex], value);\n    }\n  }]);\n\n  return StructRow;\n}(Row);\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n/** @ignore */\n\nvar defineRowProxyProperties = function () {\n  var desc = {\n    enumerable: true,\n    configurable: false,\n    get: null,\n    set: null\n  };\n  return function (row) {\n    var idx = -1,\n        ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n\n    var getter = function getter(key) {\n      return function () {\n        return this.get(key);\n      };\n    };\n\n    var setter = function setter(key) {\n      return function (val) {\n        return this.set(key, val);\n      };\n    };\n\n    var _iterator3 = _createForOfIteratorHelper(row.keys()),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        ktoi.set(key, ++idx);\n        desc.get = getter(key);\n        desc.set = setter(key);\n        row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n        row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    desc.get = desc.set = null;\n    return row;\n  };\n}();\n/** @ignore */\n\n\nvar createRowProxy = function () {\n  if (typeof Proxy === 'undefined') {\n    return defineRowProxyProperties;\n  }\n\n  var has = Row.prototype.has;\n  var _get = Row.prototype.get;\n  var _set = Row.prototype.set;\n  var getKey = Row.prototype.getKey;\n  var RowProxyHandler = {\n    isExtensible: function isExtensible() {\n      return false;\n    },\n    deleteProperty: function deleteProperty() {\n      return false;\n    },\n    preventExtensions: function preventExtensions() {\n      return true;\n    },\n    ownKeys: function ownKeys(row) {\n      return _toConsumableArray(row.keys()).map(function (x) {\n        return \"\".concat(x);\n      });\n    },\n    has: function has(row, key) {\n      switch (key) {\n        case 'getKey':\n        case 'getIndex':\n        case 'getValue':\n        case 'setValue':\n        case 'toArray':\n        case 'toJSON':\n        case 'inspect':\n        case 'constructor':\n        case 'isPrototypeOf':\n        case 'propertyIsEnumerable':\n        case 'toString':\n        case 'toLocaleString':\n        case 'valueOf':\n        case 'size':\n        case 'has':\n        case 'get':\n        case 'set':\n        case 'clear':\n        case 'delete':\n        case 'keys':\n        case 'values':\n        case 'entries':\n        case 'forEach':\n        case '__proto__':\n        case '__defineGetter__':\n        case '__defineSetter__':\n        case 'hasOwnProperty':\n        case '__lookupGetter__':\n        case '__lookupSetter__':\n        case Symbol.iterator:\n        case Symbol.toStringTag:\n        case kParent:\n        case kRowIndex:\n        case kIdxToVal:\n        case kKeyToIdx:\n        case kCustomInspect:\n          return true;\n      }\n\n      if (typeof key === 'number' && !row.has(key)) {\n        key = row.getKey(key);\n      }\n\n      return row.has(key);\n    },\n    get: function get(row, key, receiver) {\n      switch (key) {\n        case 'getKey':\n        case 'getIndex':\n        case 'getValue':\n        case 'setValue':\n        case 'toArray':\n        case 'toJSON':\n        case 'inspect':\n        case 'constructor':\n        case 'isPrototypeOf':\n        case 'propertyIsEnumerable':\n        case 'toString':\n        case 'toLocaleString':\n        case 'valueOf':\n        case 'size':\n        case 'has':\n        case 'get':\n        case 'set':\n        case 'clear':\n        case 'delete':\n        case 'keys':\n        case 'values':\n        case 'entries':\n        case 'forEach':\n        case '__proto__':\n        case '__defineGetter__':\n        case '__defineSetter__':\n        case 'hasOwnProperty':\n        case '__lookupGetter__':\n        case '__lookupSetter__':\n        case Symbol.iterator:\n        case Symbol.toStringTag:\n        case kParent:\n        case kRowIndex:\n        case kIdxToVal:\n        case kKeyToIdx:\n        case kCustomInspect:\n          return Reflect.get(row, key, receiver);\n      }\n\n      if (typeof key === 'number' && !has.call(receiver, key)) {\n        key = getKey.call(receiver, key);\n      }\n\n      return _get.call(receiver, key);\n    },\n    set: function set(row, key, val, receiver) {\n      switch (key) {\n        case kParent:\n        case kRowIndex:\n        case kIdxToVal:\n        case kKeyToIdx:\n          return Reflect.set(row, key, val, receiver);\n\n        case 'getKey':\n        case 'getIndex':\n        case 'getValue':\n        case 'setValue':\n        case 'toArray':\n        case 'toJSON':\n        case 'inspect':\n        case 'constructor':\n        case 'isPrototypeOf':\n        case 'propertyIsEnumerable':\n        case 'toString':\n        case 'toLocaleString':\n        case 'valueOf':\n        case 'size':\n        case 'has':\n        case 'get':\n        case 'set':\n        case 'clear':\n        case 'delete':\n        case 'keys':\n        case 'values':\n        case 'entries':\n        case 'forEach':\n        case '__proto__':\n        case '__defineGetter__':\n        case '__defineSetter__':\n        case 'hasOwnProperty':\n        case '__lookupGetter__':\n        case '__lookupSetter__':\n        case Symbol.iterator:\n        case Symbol.toStringTag:\n          return false;\n      }\n\n      if (typeof key === 'number' && !has.call(receiver, key)) {\n        key = getKey.call(receiver, key);\n      }\n\n      return has.call(receiver, key) ? !!_set.call(receiver, key, val) : false;\n    }\n  };\n  return function (row) {\n    return new Proxy(row, RowProxyHandler);\n  };\n}();","map":{"version":3,"sources":["vector/row.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { StructVector } from './struct';\nimport { valueToString } from '../util/pretty';\nimport { DataType, Struct, RowLike } from '../type';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n\n    public readonly size: number;\n    public readonly [Symbol.toStringTag]: string;\n\n    protected [kRowIndex]: number;\n    protected [kParent]: Vector<Struct>;\n    protected [kKeyToIdx]: Map<K, number>;\n    protected [kIdxToVal]: V[];\n\n    constructor(parent: Vector<Struct>, numKeys: number) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n\n    public abstract keys(): IterableIterator<K>;\n    public abstract values(): IterableIterator<V>;\n    public abstract getKey(idx: number): K;\n    public abstract getIndex(key: K): number;\n    public abstract getValue(idx: number): V;\n    public abstract setValue(idx: number, val: V): void;\n\n    public entries() { return this[Symbol.iterator](); }\n\n    public has(key: K) { return this.get(key) !== undefined; }\n\n    public get(key: K) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            } else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n\n    public set(key: K, val: V) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = <any> this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n\n    public toArray() { return [...this.values()]; }\n    public toJSON() {\n        const obj = {} as any;\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n\n    public inspect() { return this.toString(); }\n    public [kCustomInspect]() { return this.toString(); }\n    public toString() {\n        const str: string[] = [];\n        this.forEach((val, key) => {\n            key = valueToString(key);\n            val = valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\n        Object.defineProperties(proto, {\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n        });\n        return (proto as any)[Symbol.toStringTag] = 'Row';\n    })(Row.prototype);\n}\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    public keys() {\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\n    }\n    public values() {\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\n    }\n    public getKey(idx: number): K['TValue'] {\n        return this[kParent].getChildAt(0)!.get(idx);\n    }\n    public getIndex(key: K['TValue']): number {\n        return this[kParent].getChildAt(0)!.indexOf(key);\n    }\n    public getValue(index: number): V['TValue'] | null {\n        return this[kParent].getChildAt(1)!.get(index);\n    }\n    public setValue(index: number, value: V['TValue'] | null): void {\n        this[kParent].getChildAt(1)!.set(index, value);\n    }\n}\n\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n    constructor(parent: StructVector<T>) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    public *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name as keyof T;\n        }\n    }\n    public *values() {\n        for (const field of this[kParent].type.children) {\n            yield (this as RowLike<T>)[field.name];\n        }\n    }\n    public getKey(idx: number): keyof T {\n        return this[kParent].type.children[idx].name as keyof T;\n    }\n    public getIndex(key: keyof T): number {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    public getValue(index: number): T[keyof T]['TValue'] | null {\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n    }\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n    }\n}\n\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n    return <T extends Row>(row: T) => {\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key: any) => function(this: T) { return this.get(key); };\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler: ProxyHandler<Row> = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row: Row, key: PropertyKey) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row: Row, key: PropertyKey, receiver: any) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\n            switch (key) {\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\n})();\n"]},"metadata":{},"sourceType":"module"}