{"ast":null,"code":"import _asyncToGenerator from \"/home/aurimas/coding/idendro-streamlit/idendrogram_streamlit_component/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _get from \"/home/aurimas/coding/idendro-streamlit/idendrogram_streamlit_component/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/aurimas/coding/idendro-streamlit/idendrogram_streamlit_component/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _slicedToArray from \"/home/aurimas/coding/idendro-streamlit/idendrogram_streamlit_component/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/home/aurimas/coding/idendro-streamlit/idendrogram_streamlit_component/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/aurimas/coding/idendro-streamlit/idendrogram_streamlit_component/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aurimas/coding/idendro-streamlit/idendrogram_streamlit_component/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/aurimas/coding/idendro-streamlit/idendrogram_streamlit_component/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/aurimas/coding/idendro-streamlit/idendrogram_streamlit_component/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { ReadableInterop } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\nexport var RecordBatchWriter = /*#__PURE__*/function (_ReadableInterop, _Symbol$asyncIterator) {\n  _inherits(RecordBatchWriter, _ReadableInterop);\n\n  var _super = _createSuper(RecordBatchWriter);\n\n  function RecordBatchWriter(options) {\n    var _this;\n\n    _classCallCheck(this, RecordBatchWriter);\n\n    _this = _super.call(this);\n    _this._position = 0;\n    _this._started = false; // @ts-ignore\n\n    _this._sink = new AsyncByteQueue();\n    _this._schema = null;\n    _this._dictionaryBlocks = [];\n    _this._recordBatchBlocks = [];\n    _this._dictionaryDeltaOffsets = new Map();\n    isObject(options) || (options = {\n      autoDestroy: true,\n      writeLegacyIpcFormat: false\n    });\n    _this._autoDestroy = typeof options.autoDestroy === 'boolean' ? options.autoDestroy : true;\n    _this._writeLegacyIpcFormat = typeof options.writeLegacyIpcFormat === 'boolean' ? options.writeLegacyIpcFormat : false;\n    return _this;\n  }\n  /** @nocollapse */\n  // @ts-ignore\n\n\n  _createClass(RecordBatchWriter, [{\n    key: \"toString\",\n    value: function toString() {\n      var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._sink.toString(sync);\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._sink.toUint8Array(sync);\n    }\n  }, {\n    key: \"writeAll\",\n    value: function writeAll(input) {\n      var _this2 = this;\n\n      if (isPromise(input)) {\n        return input.then(function (x) {\n          return _this2.writeAll(x);\n        });\n      } else if (isAsyncIterable(input)) {\n        return writeAllAsync(this, input);\n      }\n\n      return _writeAll(this, input);\n    }\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this._sink.closed;\n    }\n  }, {\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this._sink[Symbol.asyncIterator]();\n    }\n  }, {\n    key: \"toDOMStream\",\n    value: function toDOMStream(options) {\n      return this._sink.toDOMStream(options);\n    }\n  }, {\n    key: \"toNodeStream\",\n    value: function toNodeStream(options) {\n      return this._sink.toNodeStream(options);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.reset()._sink.close();\n    }\n  }, {\n    key: \"abort\",\n    value: function abort(reason) {\n      return this.reset()._sink.abort(reason);\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n      return this;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var sink = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._sink;\n      var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (sink === this._sink || sink instanceof AsyncByteQueue) {\n        this._sink = sink;\n      } else {\n        this._sink = new AsyncByteQueue();\n\n        if (sink && isWritableDOMStream(sink)) {\n          this.toDOMStream({\n            type: 'bytes'\n          }).pipeTo(sink);\n        } else if (sink && isWritableNodeStream(sink)) {\n          this.toNodeStream({\n            objectMode: false\n          }).pipe(sink);\n        }\n      }\n\n      if (this._started && this._schema) {\n        this._writeFooter(this._schema);\n      }\n\n      this._started = false;\n      this._dictionaryBlocks = [];\n      this._recordBatchBlocks = [];\n      this._dictionaryDeltaOffsets = new Map();\n\n      if (!schema || !schema.compareTo(this._schema)) {\n        if (schema === null) {\n          this._position = 0;\n          this._schema = null;\n        } else {\n          this._started = true;\n          this._schema = schema;\n\n          this._writeSchema(schema);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"write\",\n    value: function write(payload) {\n      var schema = null;\n\n      if (!this._sink) {\n        throw new Error(\"RecordBatchWriter is closed\");\n      } else if (payload === null || payload === undefined) {\n        return this.finish() && undefined;\n      } else if (payload instanceof Table && !(schema = payload.schema)) {\n        return this.finish() && undefined;\n      } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n        return this.finish() && undefined;\n      }\n\n      if (schema && !schema.compareTo(this._schema)) {\n        if (this._started && this._autoDestroy) {\n          return this.close();\n        }\n\n        this.reset(this._sink, schema);\n      }\n\n      if (payload instanceof RecordBatch) {\n        if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n          this._writeRecordBatch(payload);\n        }\n      } else if (payload instanceof Table) {\n        this.writeAll(payload.chunks);\n      } else if (isIterable(payload)) {\n        this.writeAll(payload);\n      }\n    }\n  }, {\n    key: \"_writeMessage\",\n    value: function _writeMessage(message) {\n      var alignment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n      var a = alignment - 1;\n      var buffer = Message.encode(message);\n      var flatbufferSize = buffer.byteLength;\n      var prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n      var alignedSize = flatbufferSize + prefixSize + a & ~a;\n      var nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n      if (message.headerType === MessageHeader.RecordBatch) {\n        this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n      } else if (message.headerType === MessageHeader.DictionaryBatch) {\n        this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n      } // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n\n\n      if (!this._writeLegacyIpcFormat) {\n        this._write(Int32Array.of(-1));\n      } // Write the flatbuffer size prefix including padding\n\n\n      this._write(Int32Array.of(alignedSize - prefixSize)); // Write the flatbuffer\n\n\n      if (flatbufferSize > 0) {\n        this._write(buffer);\n      } // Write any padding\n\n\n      return this._writePadding(nPaddingBytes);\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(chunk) {\n      if (this._started) {\n        var buffer = toUint8Array(chunk);\n\n        if (buffer && buffer.byteLength > 0) {\n          this._sink.write(buffer);\n\n          this._position += buffer.byteLength;\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_writeSchema\",\n    value: function _writeSchema(schema) {\n      return this._writeMessage(Message.from(schema));\n    } // @ts-ignore\n\n  }, {\n    key: \"_writeFooter\",\n    value: function _writeFooter(schema) {\n      // eos bytes\n      return this._writeLegacyIpcFormat ? this._write(Int32Array.of(0)) : this._write(Int32Array.of(-1, 0));\n    }\n  }, {\n    key: \"_writeMagic\",\n    value: function _writeMagic() {\n      return this._write(MAGIC);\n    }\n  }, {\n    key: \"_writePadding\",\n    value: function _writePadding(nBytes) {\n      return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n  }, {\n    key: \"_writeRecordBatch\",\n    value: function _writeRecordBatch(batch) {\n      var _VectorAssembler$asse = VectorAssembler.assemble(batch),\n          byteLength = _VectorAssembler$asse.byteLength,\n          nodes = _VectorAssembler$asse.nodes,\n          bufferRegions = _VectorAssembler$asse.bufferRegions,\n          buffers = _VectorAssembler$asse.buffers;\n\n      var recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n      var message = Message.from(recordBatch, byteLength);\n      return this._writeDictionaries(batch)._writeMessage(message)._writeBodyBuffers(buffers);\n    }\n  }, {\n    key: \"_writeDictionaryBatch\",\n    value: function _writeDictionaryBatch(dictionary, id) {\n      var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n\n      var _VectorAssembler$asse2 = VectorAssembler.assemble(dictionary),\n          byteLength = _VectorAssembler$asse2.byteLength,\n          nodes = _VectorAssembler$asse2.nodes,\n          bufferRegions = _VectorAssembler$asse2.bufferRegions,\n          buffers = _VectorAssembler$asse2.buffers;\n\n      var recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n      var dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n      var message = Message.from(dictionaryBatch, byteLength);\n      return this._writeMessage(message)._writeBodyBuffers(buffers);\n    }\n  }, {\n    key: \"_writeBodyBuffers\",\n    value: function _writeBodyBuffers(buffers) {\n      var buffer;\n      var size, padding;\n\n      for (var i = -1, n = buffers.length; ++i < n;) {\n        if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n          this._write(buffer);\n\n          if ((padding = (size + 7 & ~7) - size) > 0) {\n            this._writePadding(padding);\n          }\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_writeDictionaries\",\n    value: function _writeDictionaries(batch) {\n      var _iterator2 = _createForOfIteratorHelper(batch.dictionaries),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              id = _step2$value[0],\n              dictionary = _step2$value[1];\n\n          var offset = this._dictionaryDeltaOffsets.get(id) || 0;\n\n          if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n            var chunks = 'chunks' in dictionary ? dictionary.chunks : [dictionary];\n\n            var _iterator3 = _createForOfIteratorHelper(chunks),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var chunk = _step3.value;\n\n                this._writeDictionaryBatch(chunk, id, offset > 0);\n\n                offset += chunk.length;\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return this;\n    }\n  }], [{\n    key: \"throughNode\",\n    value: function throughNode(options) {\n      throw new Error(\"\\\"throughNode\\\" not available in this environment\");\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"throughDOM\",\n    value: function throughDOM( // @ts-ignore\n    writableStrategy, // @ts-ignore\n    readableStrategy) {\n      throw new Error(\"\\\"throughDOM\\\" not available in this environment\");\n    }\n  }]);\n\n  return RecordBatchWriter;\n}(ReadableInterop, Symbol.asyncIterator);\n/** @ignore */\n\nexport var RecordBatchStreamWriter = /*#__PURE__*/function (_RecordBatchWriter) {\n  _inherits(RecordBatchStreamWriter, _RecordBatchWriter);\n\n  var _super2 = _createSuper(RecordBatchStreamWriter);\n\n  function RecordBatchStreamWriter() {\n    _classCallCheck(this, RecordBatchStreamWriter);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(RecordBatchStreamWriter, null, [{\n    key: \"writeAll\",\n    value:\n    /** @nocollapse */\n    function writeAll(input, options) {\n      var writer = new RecordBatchStreamWriter(options);\n\n      if (isPromise(input)) {\n        return input.then(function (x) {\n          return writer.writeAll(x);\n        });\n      } else if (isAsyncIterable(input)) {\n        return writeAllAsync(writer, input);\n      }\n\n      return _writeAll(writer, input);\n    }\n  }]);\n\n  return RecordBatchStreamWriter;\n}(RecordBatchWriter);\n/** @ignore */\n\nexport var RecordBatchFileWriter = /*#__PURE__*/function (_RecordBatchWriter2) {\n  _inherits(RecordBatchFileWriter, _RecordBatchWriter2);\n\n  var _super3 = _createSuper(RecordBatchFileWriter);\n\n  function RecordBatchFileWriter() {\n    var _this3;\n\n    _classCallCheck(this, RecordBatchFileWriter);\n\n    _this3 = _super3.call(this);\n    _this3._autoDestroy = true;\n    return _this3;\n  }\n  /** @nocollapse */\n\n\n  _createClass(RecordBatchFileWriter, [{\n    key: \"_writeSchema\",\n    value: // @ts-ignore\n    function _writeSchema(schema) {\n      return this._writeMagic()._writePadding(2);\n    }\n  }, {\n    key: \"_writeFooter\",\n    value: function _writeFooter(schema) {\n      var buffer = Footer.encode(new Footer(schema, MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));\n      return _get(_getPrototypeOf(RecordBatchFileWriter.prototype), \"_writeFooter\", this).call(this, schema) // EOS bytes for sequential readers\n      ._write(buffer) // Write the flatbuffer\n      ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n      ._writeMagic(); // then the magic suffix\n    }\n  }], [{\n    key: \"writeAll\",\n    value: function writeAll(input) {\n      var writer = new RecordBatchFileWriter();\n\n      if (isPromise(input)) {\n        return input.then(function (x) {\n          return writer.writeAll(x);\n        });\n      } else if (isAsyncIterable(input)) {\n        return writeAllAsync(writer, input);\n      }\n\n      return _writeAll(writer, input);\n    }\n  }]);\n\n  return RecordBatchFileWriter;\n}(RecordBatchWriter);\n/** @ignore */\n\nexport var RecordBatchJSONWriter = /*#__PURE__*/function (_RecordBatchWriter3) {\n  _inherits(RecordBatchJSONWriter, _RecordBatchWriter3);\n\n  var _super4 = _createSuper(RecordBatchJSONWriter);\n\n  function RecordBatchJSONWriter() {\n    var _this4;\n\n    _classCallCheck(this, RecordBatchJSONWriter);\n\n    _this4 = _super4.call(this);\n    _this4._autoDestroy = true;\n    _this4._recordBatches = [];\n    _this4._dictionaries = [];\n    return _this4;\n  }\n  /** @nocollapse */\n\n\n  _createClass(RecordBatchJSONWriter, [{\n    key: \"_writeMessage\",\n    value: function _writeMessage() {\n      return this;\n    } // @ts-ignore\n\n  }, {\n    key: \"_writeFooter\",\n    value: function _writeFooter(schema) {\n      return this;\n    }\n  }, {\n    key: \"_writeSchema\",\n    value: function _writeSchema(schema) {\n      return this._write(\"{\\n  \\\"schema\\\": \".concat(JSON.stringify({\n        fields: schema.fields.map(fieldToJSON)\n      }, null, 2)));\n    }\n  }, {\n    key: \"_writeDictionaries\",\n    value: function _writeDictionaries(batch) {\n      if (batch.dictionaries.size > 0) {\n        this._dictionaries.push(batch);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_writeDictionaryBatch\",\n    value: function _writeDictionaryBatch(dictionary, id) {\n      var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n\n      this._write(this._dictionaryBlocks.length === 0 ? \"    \" : \",\\n    \");\n\n      this._write(\"\".concat(dictionaryBatchToJSON(dictionary, id, isDelta)));\n\n      this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n\n      return this;\n    }\n  }, {\n    key: \"_writeRecordBatch\",\n    value: function _writeRecordBatch(batch) {\n      this._writeDictionaries(batch);\n\n      this._recordBatches.push(batch);\n\n      return this;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._dictionaries.length > 0) {\n        this._write(\",\\n  \\\"dictionaries\\\": [\\n\");\n\n        var _iterator4 = _createForOfIteratorHelper(this._dictionaries),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var batch = _step4.value;\n\n            _get(_getPrototypeOf(RecordBatchJSONWriter.prototype), \"_writeDictionaries\", this).call(this, batch);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        this._write(\"\\n  ]\");\n      }\n\n      if (this._recordBatches.length > 0) {\n        for (var i = -1, n = this._recordBatches.length; ++i < n;) {\n          this._write(i === 0 ? \",\\n  \\\"batches\\\": [\\n    \" : \",\\n    \");\n\n          this._write(\"\".concat(recordBatchToJSON(this._recordBatches[i])));\n\n          this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n        }\n\n        this._write(\"\\n  ]\");\n      }\n\n      if (this._schema) {\n        this._write(\"\\n}\");\n      }\n\n      this._dictionaries = [];\n      this._recordBatches = [];\n      return _get(_getPrototypeOf(RecordBatchJSONWriter.prototype), \"close\", this).call(this);\n    }\n  }], [{\n    key: \"writeAll\",\n    value: function writeAll(input) {\n      return new RecordBatchJSONWriter().writeAll(input);\n    }\n  }]);\n\n  return RecordBatchJSONWriter;\n}(RecordBatchWriter);\n/** @ignore */\n\nfunction _writeAll(writer, input) {\n  var chunks = input;\n\n  if (input instanceof Table) {\n    chunks = input.chunks;\n    writer.reset(undefined, input.schema);\n  }\n\n  var _iterator5 = _createForOfIteratorHelper(chunks),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var batch = _step5.value;\n      writer.write(batch);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  return writer.finish();\n}\n/** @ignore */\n\n\nfunction writeAllAsync(_x, _x2) {\n  return _writeAllAsync.apply(this, arguments);\n}\n/** @ignore */\n\n\nfunction _writeAllAsync() {\n  _writeAllAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(writer, batches) {\n    var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, batch;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 2;\n            _iterator = _asyncIterator(batches);\n\n          case 4:\n            _context.next = 6;\n            return _iterator.next();\n\n          case 6:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 12;\n              break;\n            }\n\n            batch = _step.value;\n            writer.write(batch);\n\n          case 9:\n            _iteratorAbruptCompletion = false;\n            _context.next = 4;\n            break;\n\n          case 12:\n            _context.next = 18;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 18:\n            _context.prev = 18;\n            _context.prev = 19;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 23;\n              break;\n            }\n\n            _context.next = 23;\n            return _iterator.return();\n\n          case 23:\n            _context.prev = 23;\n\n            if (!_didIteratorError) {\n              _context.next = 26;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 26:\n            return _context.finish(23);\n\n          case 27:\n            return _context.finish(18);\n\n          case 28:\n            return _context.abrupt(\"return\", writer.finish());\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 14, 18, 28], [19,, 23, 27]]);\n  }));\n  return _writeAllAsync.apply(this, arguments);\n}\n\nfunction fieldToJSON(_ref) {\n  var name = _ref.name,\n      type = _ref.type,\n      nullable = _ref.nullable;\n  var assembler = new JSONTypeAssembler();\n  return {\n    'name': name,\n    'nullable': nullable,\n    'type': assembler.visit(type),\n    'children': (type.children || []).map(fieldToJSON),\n    'dictionary': !DataType.isDictionary(type) ? undefined : {\n      'id': type.id,\n      'isOrdered': type.isOrdered,\n      'indexType': assembler.visit(type.indices)\n    }\n  };\n}\n/** @ignore */\n\n\nfunction dictionaryBatchToJSON(dictionary, id) {\n  var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var field = new Field(\"\".concat(id), dictionary.type, dictionary.nullCount > 0);\n  var columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n  return JSON.stringify({\n    'id': id,\n    'isDelta': isDelta,\n    'data': {\n      'count': dictionary.length,\n      'columns': columns\n    }\n  }, null, 2);\n}\n/** @ignore */\n\n\nfunction recordBatchToJSON(records) {\n  return JSON.stringify({\n    'count': records.length,\n    'columns': JSONVectorAssembler.assemble(records)\n  }, null, 2);\n}","map":{"version":3,"sources":["ipc/writer.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n"]},"metadata":{},"sourceType":"module"}