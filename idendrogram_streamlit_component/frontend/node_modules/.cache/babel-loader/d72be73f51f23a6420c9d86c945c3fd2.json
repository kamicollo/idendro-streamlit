{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\nimport * as d3 from 'd3';\n\nfunction create_container(dimensions) {\n  // append svg element to the body of the page\n  // set dimensions and position of the svg element\n  let svg = d3.select(\"body\").append(\"svg\").attr(\"id\", \"idendro\").attr(\"width\", dimensions.width).attr(\"height\", dimensions.height);\n  let plot = svg.append(\"g\").attr(\"transform\", \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\").attr(\"id\", \"idendro-container\");\n  return plot;\n}\n\nfunction create_axis(plot, dimensions, dendrogram) {\n  //create X-axis\n  var xScale = d3.scaleLinear();\n  xScale.domain([0, 9]).range([0, dimensions.innerWidth]);\n  var xAxis = d3.axisBottom(xScale); //create y-axis\n\n  var yScale = d3.scaleLinear();\n  yScale.domain([0, 100]).range([dimensions.innerHeight, 0]);\n  var yAxis = d3.axisLeft(yScale); //add X-axis to plot\n\n  let xg = plot.append(\"g\").attr(\"id\", \"x-axis-lines\").attr(\"transform\", \"translate(0,\" + dimensions.innerHeight + \")\").call(xAxis); //add Y-axis to plot\n\n  let yg = plot.append(\"g\").attr(\"id\", \"y-axis-lines\") //.attr(\"transform\", \"translate(\" + padding.left + \",0)\")\n  .call(yAxis);\n}\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\n\n\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail;\n  var dendrogram = data.args['data'];\n  let margin = {\n    top: 20,\n    right: 10,\n    bottom: 20,\n    left: 50\n  };\n  let dimensions = {\n    height: data.args['height'],\n    width: data.args['width'],\n    margin: margin,\n    innerHeight: 0,\n    innerWidth: 0\n  };\n  dimensions.innerHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n  dimensions.innerWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  let plot = create_container(dimensions);\n  create_axis(plot, dimensions, dendrogram);\n  Streamlit.setFrameHeight();\n} // Attach our `onRender` handler to Streamlit's render event.\n\n\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","d3","create_container","dimensions","svg","select","append","attr","width","height","plot","margin","left","top","create_axis","dendrogram","xScale","scaleLinear","domain","range","innerWidth","xAxis","axisBottom","yScale","innerHeight","yAxis","axisLeft","xg","call","yg","onRender","event","data","detail","args","right","bottom","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/home/aurimas/coding/idendro/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport * as d3 from 'd3'\n\ninterface AxisLabel {\n    x: number\n    label: string\n    labelsize: number\n}\n\ninterface ClusterLink {\n    x: number[]\n    y: number[]\n    fillcolor: string\n    size: number\n}\n\ninterface ClusterNode {\n    x: number\n    y: number\n    edgecolor: string\n    fillcolor: string\n    label: string\n    hovertext: Object[] | string\n    size: number\n    labelsize: number\n    labelcolor: string\n\n}\n\ninterface Dendrogram {\n    axis_labels: AxisLabel[]\n    links: ClusterLink[]\n    nodes: ClusterNode[]\n    x_limits: [number, number]\n    y_limits: [number, number]\n}\n\ninterface Dimensions {\n    margin: Margin\n    height: number\n    width: number\n    innerHeight: number\n    innerWidth: number\n}\n\ninterface Margin {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\ninterface plot extends d3.Selection<SVGGElement, unknown, HTMLElement, any> {\n    \n}\n\nfunction create_container(dimensions: Dimensions): plot {\n\n    // append svg element to the body of the page\n    // set dimensions and position of the svg element\n    let svg = d3\n        .select(\"body\")\n        .append(\"svg\")\n        .attr(\"id\", \"idendro\")\n        .attr(\"width\", dimensions.width)\n        .attr(\"height\", dimensions.height)\n\n    let plot = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\")\n        .attr(\"id\", \"idendro-container\");\n\n    return plot\n}\n\nfunction create_axis(plot: plot, dimensions: Dimensions, dendrogram: Dendrogram) {\n    //create X-axis\n\n    var xScale = d3.scaleLinear()        \n    xScale.domain([0,9]).range([0, dimensions.innerWidth])\n    var xAxis = d3.axisBottom(xScale)\n    \n    //create y-axis\n    var yScale = d3.scaleLinear()\n    yScale.domain([0, 100]).range([dimensions.innerHeight, 0])\n    var yAxis = d3.axisLeft(yScale)\n\n    //add X-axis to plot\n    let xg = plot.append(\"g\")\n        .attr(\"id\", \"x-axis-lines\")            \n        .attr(\"transform\", \"translate(0,\" + dimensions.innerHeight + \")\")\n        .call(xAxis)\n\n    //add Y-axis to plot\n    let yg = plot.append(\"g\")\n    .attr(\"id\", \"y-axis-lines\")            \n    //.attr(\"transform\", \"translate(\" + padding.left + \",0)\")\n    .call(yAxis)\n}\n\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n    // Get the RenderData from the event\n    const data = (event as CustomEvent<RenderData>).detail\n\n    var dendrogram: Dendrogram = data.args['data']\n    let margin: Margin = { top: 20, right: 10, bottom: 20, left: 50 }\n    let dimensions: Dimensions = {\n        height:  data.args['height'],\n        width: data.args['width'],\n        margin: margin,\n        innerHeight: 0,\n        innerWidth: 0\n    }\n    dimensions.innerHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom\n    dimensions.innerWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right\n    \n    let plot = create_container(dimensions)\n    create_axis(plot, dimensions, dendrogram)\n\n    Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}