{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\nimport * as d3 from 'd3';\n\nfunction create_container(margin, width, height) {\n  // append svg element to the body of the page\n  // set dimensions and position of the svg element\n  let svg = d3.select(\"body\").append(\"svg\").attr(\"id\", \"idendro\").attr(\"width\", width).attr(\"height\", height);\n  let plot = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"id\", \"idendro-container\");\n  return plot;\n}\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\n\n\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail;\n  var dendrogram = data.args['data'];\n  let margin = {\n    top: 20,\n    right: 10,\n    bottom: 20,\n    left: 10\n  };\n  let height = data.args['height'];\n  let width = data.args['width'];\n  let innerWidth = width - margin.left - margin.right;\n  let innerHeight = height - margin.top - margin.bottom;\n  let plot = create_container(margin, width, height);\n  Streamlit.setFrameHeight();\n} // Attach our `onRender` handler to Streamlit's render event.\n\n\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","d3","create_container","margin","width","height","svg","select","append","attr","plot","left","top","onRender","event","data","detail","dendrogram","args","right","bottom","innerWidth","innerHeight","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/home/aurimas/coding/idendro/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport * as d3 from 'd3'\n\ninterface AxisLabel {\n    x: number\n    label: string\n    labelsize: number\n}\n\ninterface ClusterLink {\n    x: number[]\n    y: number[]\n    fillcolor: string\n    size: number\n}\n\ninterface ClusterNode {\n    x: number\n    y: number\n    edgecolor: string\n    fillcolor: string\n    label: string\n    hovertext: Object[] | string\n    size: number\n    labelsize: number\n    labelcolor: string\n\n}\n\ninterface Dendrogram {\n    axis_labels: AxisLabel[]\n    links: ClusterLink[]\n    nodes: ClusterNode[]\n}\n\ninterface Margin {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\nfunction create_container(margin: Margin, width: number, height: number): d3.Selection<SVGGElement, unknown, HTMLElement, any> {\n\n    // append svg element to the body of the page\n    // set dimensions and position of the svg element\n    let svg = d3\n        .select(\"body\")\n        .append(\"svg\")\n        .attr(\"id\", \"idendro\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n\n    let plot = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n        .attr(\"id\", \"idendro-container\");\n\n    return plot\n}\n\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n    // Get the RenderData from the event\n    const data = (event as CustomEvent<RenderData>).detail\n\n    var dendrogram: Dendrogram = data.args['data']\n    let margin: Margin = { top: 20, right: 10, bottom: 20, left: 10 }\n    let height: number = data.args['height']\n    let width: number = data.args['width']\n    let innerWidth: number = width - margin.left - margin.right\n    let innerHeight: number = height - margin.top - margin.bottom\n    \n    let plot = create_container(margin, width, height)\n\n    Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"AAAA,SAASA,SAAT,QAAsC,yBAAtC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAyCA,SAASC,gBAAT,CAA0BC,MAA1B,EAA0CC,KAA1C,EAAyDC,MAAzD,EAA+H;EAE3H;EACA;EACA,IAAIC,GAAG,GAAGL,EAAE,CACPM,MADK,CACE,MADF,EAELC,MAFK,CAEE,KAFF,EAGLC,IAHK,CAGA,IAHA,EAGM,SAHN,EAILA,IAJK,CAIA,OAJA,EAISL,KAJT,EAKLK,IALK,CAKA,QALA,EAKUJ,MALV,CAAV;EAOA,IAAIK,IAAI,GAAGJ,GAAG,CAACE,MAAJ,CAAW,GAAX,EACNC,IADM,CACD,WADC,EACY,eAAeN,MAAM,CAACQ,IAAtB,GAA6B,GAA7B,GAAmCR,MAAM,CAACS,GAA1C,GAAgD,GAD5D,EAENH,IAFM,CAED,IAFC,EAEK,mBAFL,CAAX;EAIA,OAAOC,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;;AACA,SAASG,QAAT,CAAkBC,KAAlB,EAAsC;EAClC;EACA,MAAMC,IAAI,GAAID,KAAD,CAAmCE,MAAhD;EAEA,IAAIC,UAAsB,GAAGF,IAAI,CAACG,IAAL,CAAU,MAAV,CAA7B;EACA,IAAIf,MAAc,GAAG;IAAES,GAAG,EAAE,EAAP;IAAWO,KAAK,EAAE,EAAlB;IAAsBC,MAAM,EAAE,EAA9B;IAAkCT,IAAI,EAAE;EAAxC,CAArB;EACA,IAAIN,MAAc,GAAGU,IAAI,CAACG,IAAL,CAAU,QAAV,CAArB;EACA,IAAId,KAAa,GAAGW,IAAI,CAACG,IAAL,CAAU,OAAV,CAApB;EACA,IAAIG,UAAkB,GAAGjB,KAAK,GAAGD,MAAM,CAACQ,IAAf,GAAsBR,MAAM,CAACgB,KAAtD;EACA,IAAIG,WAAmB,GAAGjB,MAAM,GAAGF,MAAM,CAACS,GAAhB,GAAsBT,MAAM,CAACiB,MAAvD;EAEA,IAAIV,IAAI,GAAGR,gBAAgB,CAACC,MAAD,EAASC,KAAT,EAAgBC,MAAhB,CAA3B;EAEAL,SAAS,CAACuB,cAAV;AACH,C,CAED;;;AACAvB,SAAS,CAACwB,MAAV,CAAiBC,gBAAjB,CAAkCzB,SAAS,CAAC0B,YAA5C,EAA0Db,QAA1D,E,CAEA;AACA;;AACAb,SAAS,CAAC2B,iBAAV,G,CAEA;AACA;;AACA3B,SAAS,CAACuB,cAAV"},"metadata":{},"sourceType":"module"}