{"ast":null,"code":"import _classCallCheck from \"/home/aurimas/coding/idendro-streamlit/idendrogram_streamlit_component/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aurimas/coding/idendro-streamlit/idendrogram_streamlit_component/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\n/** @ignore */\n\nexport var kUnknownNullCount = -1;\n/** @ignore */\n\nexport var Data = /*#__PURE__*/function () {\n  function Data(type, offset, length, nullCount, buffers, childData, dictionary) {\n    _classCallCheck(this, Data);\n\n    this.type = type;\n    this.dictionary = dictionary;\n    this.offset = Math.floor(Math.max(offset || 0, 0));\n    this.length = Math.floor(Math.max(length || 0, 0));\n    this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    this.childData = (childData || []).map(function (x) {\n      return x instanceof Data ? x : x.data;\n    });\n    var buffer;\n\n    if (buffers instanceof Data) {\n      this.stride = buffers.stride;\n      this.values = buffers.values;\n      this.typeIds = buffers.typeIds;\n      this.nullBitmap = buffers.nullBitmap;\n      this.valueOffsets = buffers.valueOffsets;\n    } else {\n      this.stride = strideForType(type);\n\n      if (buffers) {\n        (buffer = buffers[0]) && (this.valueOffsets = buffer);\n        (buffer = buffers[1]) && (this.values = buffer);\n        (buffer = buffers[2]) && (this.nullBitmap = buffer);\n        (buffer = buffers[3]) && (this.typeIds = buffer);\n      }\n    }\n  }\n\n  _createClass(Data, [{\n    key: \"typeId\",\n    get: function get() {\n      return this.type.typeId;\n    }\n  }, {\n    key: \"ArrayType\",\n    get: function get() {\n      return this.type.ArrayType;\n    }\n  }, {\n    key: \"buffers\",\n    get: function get() {\n      return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      var byteLength = 0;\n      var valueOffsets = this.valueOffsets,\n          values = this.values,\n          nullBitmap = this.nullBitmap,\n          typeIds = this.typeIds;\n      valueOffsets && (byteLength += valueOffsets.byteLength);\n      values && (byteLength += values.byteLength);\n      nullBitmap && (byteLength += nullBitmap.byteLength);\n      typeIds && (byteLength += typeIds.byteLength);\n      return this.childData.reduce(function (byteLength, child) {\n        return byteLength + child.byteLength;\n      }, byteLength);\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      var nullCount = this._nullCount;\n      var nullBitmap;\n\n      if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n        this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n      }\n\n      return nullCount;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(type) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;\n      var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.length;\n      var nullCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._nullCount;\n      var buffers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this;\n      var childData = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.childData;\n      return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(offset, length) {\n      var stride = this.stride,\n          typeId = this.typeId,\n          childData = this.childData; // +true === 1, +false === 0, so this means\n      // we keep nullCount at 0 if it's already 0,\n      // otherwise set to the invalidated flag -1\n\n      var nullCount = +(this._nullCount === 0) - 1;\n      var childStride = typeId === 16\n      /* FixedSizeList */\n      ? stride : 1;\n\n      var buffers = this._sliceBuffers(offset, length, stride, typeId);\n\n      return this.clone(this.type, this.offset + offset, length, nullCount, buffers, // Don't slice children if we have value offsets (the variable-width types)\n      !childData.length || this.valueOffsets ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n  }, {\n    key: \"_changeLengthAndBackfillNullBitmap\",\n    value: function _changeLengthAndBackfillNullBitmap(newLength) {\n      if (this.typeId === Type.Null) {\n        return this.clone(this.type, 0, newLength, 0);\n      }\n\n      var length = this.length,\n          nullCount = this.nullCount; // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n\n      var bitmap = new Uint8Array((newLength + 63 & ~63) >> 3).fill(255, 0, length >> 3); // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n\n      bitmap[length >> 3] = (1 << length - (length & ~7)) - 1; // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n\n      if (nullCount > 0) {\n        bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n      }\n\n      var buffers = this.buffers;\n      buffers[BufferType.VALIDITY] = bitmap;\n      return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n  }, {\n    key: \"_sliceBuffers\",\n    value: function _sliceBuffers(offset, length, stride, typeId) {\n      var arr,\n          buffers = this.buffers; // If typeIds exist, slice the typeIds buffer\n\n      (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length)); // If offsets exist, only slice the offsets buffer\n\n      (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) || // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n      (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n      return buffers;\n    }\n  }, {\n    key: \"_sliceChildren\",\n    value: function _sliceChildren(childData, offset, length) {\n      return childData.map(function (child) {\n        return child.slice(offset, length);\n      });\n    } //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n\n    /** @nocollapse */\n\n  }], [{\n    key: \"new\",\n    value: function _new(type, offset, length, nullCount, buffers, childData, dictionary) {\n      if (buffers instanceof Data) {\n        buffers = buffers.buffers;\n      } else if (!buffers) {\n        buffers = [];\n      }\n\n      switch (type.typeId) {\n        case Type.Null:\n          return Data.Null(type, offset, length);\n\n        case Type.Int:\n          return Data.Int(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n        case Type.Dictionary:\n          return Data.Dictionary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary);\n\n        case Type.Float:\n          return Data.Float(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n        case Type.Bool:\n          return Data.Bool(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n        case Type.Decimal:\n          return Data.Decimal(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n        case Type.Date:\n          return Data.Date(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n        case Type.Time:\n          return Data.Time(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n        case Type.Timestamp:\n          return Data.Timestamp(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n        case Type.Interval:\n          return Data.Interval(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n        case Type.FixedSizeBinary:\n          return Data.FixedSizeBinary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n        case Type.Binary:\n          return Data.Binary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []);\n\n        case Type.Utf8:\n          return Data.Utf8(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []);\n\n        case Type.List:\n          return Data.List(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]);\n\n        case Type.FixedSizeList:\n          return Data.FixedSizeList(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]);\n\n        case Type.Struct:\n          return Data.Struct(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []);\n\n        case Type.Map:\n          return Data.Map(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]);\n\n        case Type.Union:\n          return Data.Union(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData);\n      }\n\n      throw new Error(\"Unrecognized typeId \".concat(type.typeId));\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Null\",\n    value: function Null(type, offset, length) {\n      return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Int\",\n    value: function Int(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Dictionary\",\n    value: function Dictionary(type, offset, length, nullCount, nullBitmap, data, dictionary) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Float\",\n    value: function Float(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Bool\",\n    value: function Bool(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Decimal\",\n    value: function Decimal(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Date\",\n    value: function Date(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Time\",\n    value: function Time(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Timestamp\",\n    value: function Timestamp(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Interval\",\n    value: function Interval(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"FixedSizeBinary\",\n    value: function FixedSizeBinary(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Binary\",\n    value: function Binary(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n      return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Utf8\",\n    value: function Utf8(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n      return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"List\",\n    value: function List(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {\n      return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"FixedSizeList\",\n    value: function FixedSizeList(type, offset, length, nullCount, nullBitmap, child) {\n      return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Struct\",\n    value: function Struct(type, offset, length, nullCount, nullBitmap, children) {\n      return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Map\",\n    value: function Map(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {\n      return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n\n  }, {\n    key: \"Union\",\n    value: function Union(type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildren, children) {\n      var buffers = [undefined, undefined, toUint8Array(nullBitmap), toArrayBufferView(type.ArrayType, typeIds)];\n\n      if (type.mode === UnionMode.Sparse) {\n        return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren);\n      }\n\n      buffers[BufferType.OFFSET] = toInt32Array(valueOffsetsOrChildren);\n      return new Data(type, offset, length, nullCount, buffers, children);\n    }\n  }]);\n\n  return Data;\n}();\nData.prototype.childData = Object.freeze([]);","map":{"version":3,"sources":["data.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n"]},"metadata":{},"sourceType":"module"}