{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\nimport * as d3 from 'd3';\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[\"top\"] = \"top\";\n  Orientation[\"bottom\"] = \"bottom\";\n  Orientation[\"right\"] = \"right\";\n  Orientation[\"left\"] = \"left\";\n})(Orientation || (Orientation = {}));\n\nfunction create_container(dimensions) {\n  // append svg element to the body of the page\n  // set dimensions and position of the svg element\n  let svg = d3.select(\"body\").append(\"svg\").attr(\"id\", \"idendro\").attr(\"width\", dimensions.width).attr(\"height\", dimensions.height);\n  let plot = svg.append(\"g\").attr(\"transform\", \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\").attr(\"id\", \"idendro-container\");\n  return plot;\n}\n\nfunction create_axis(plot, dimensions, dendrogram) {\n  let width_limits,\n      height_limits,\n      height_range,\n      width_range = [0, 0]; //handle orientation impact on scale ranges & positioning\n\n  if (dimensions.orientation === Orientation.top || dimensions.orientation === Orientation.bottom) {\n    height_limits = dendrogram.y_limits;\n    width_limits = dendrogram.x_limits;\n    width_range = [0, dimensions.innerWidth];\n\n    if (dimensions.orientation === Orientation.top) {\n      height_range = [dimensions.innerHeight, 0];\n    } else {\n      height_range = [0, dimensions.innerHeight];\n    }\n  } else {\n    height_limits = dendrogram.x_limits;\n    width_limits = dendrogram.y_limits;\n    height_range = [dimensions.innerHeight, 0];\n\n    if (dimensions.orientation === Orientation.left) {\n      width_range = [0, dimensions.innerWidth];\n    } else {\n      width_range = [dimensions.innerWidth, 0];\n    }\n  } //create X-axis\n\n\n  var xScale = d3.scaleLinear();\n  xScale.domain(width_limits).range(width_range);\n  var xAxis = d3.axisBottom(xScale); //create y-axis\n\n  var yScale = d3.scaleLinear();\n  yScale.domain(height_limits).range(height_range);\n  var yAxis = d3.axisLeft(yScale); //add X-axis to plot\n\n  let xg = plot.append(\"g\").attr(\"id\", \"x-axis-lines\").attr(\"transform\", \"translate(0,\" + dimensions.innerHeight + \")\").call(xAxis); //add Y-axis to plot\n\n  let yg = plot.append(\"g\").attr(\"id\", \"y-axis-lines\") //.attr(\"transform\", \"translate(\" + padding.left + \",0)\")\n  .call(yAxis);\n}\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\n\n\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail;\n  var dendrogram = data.args['data'];\n  let margin = {\n    top: 20,\n    right: 10,\n    bottom: 20,\n    left: 50\n  };\n  let dimensions = {\n    height: data.args['height'],\n    width: data.args['width'],\n    margin: margin,\n    innerHeight: 0,\n    innerWidth: 0,\n    orientation: data.args['orientation']\n  };\n  dimensions.innerHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n  dimensions.innerWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  let plot = create_container(dimensions);\n  create_axis(plot, dimensions, dendrogram);\n  Streamlit.setFrameHeight();\n} // Attach our `onRender` handler to Streamlit's render event.\n\n\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","d3","Orientation","create_container","dimensions","svg","select","append","attr","width","height","plot","margin","left","top","create_axis","dendrogram","width_limits","height_limits","height_range","width_range","orientation","bottom","y_limits","x_limits","innerWidth","innerHeight","xScale","scaleLinear","domain","range","xAxis","axisBottom","yScale","yAxis","axisLeft","xg","call","yg","onRender","event","data","detail","args","right","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/home/aurimas/coding/idendro/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport * as d3 from 'd3'\n\ninterface AxisLabel {\n    x: number\n    label: string\n    labelsize: number\n}\n\ninterface ClusterLink {\n    x: number[]\n    y: number[]\n    fillcolor: string\n    size: number\n}\n\ninterface ClusterNode {\n    x: number\n    y: number\n    edgecolor: string\n    fillcolor: string\n    label: string\n    hovertext: Object[] | string\n    size: number\n    labelsize: number\n    labelcolor: string\n\n}\n\ninterface Dendrogram {\n    axis_labels: AxisLabel[]\n    links: ClusterLink[]\n    nodes: ClusterNode[]\n    x_limits: [number, number]\n    y_limits: [number, number]\n}\n\ninterface Dimensions {\n    margin: Margin\n    height: number\n    width: number\n    innerHeight: number\n    innerWidth: number,\n    orientation: Orientation\n}\n\nenum Orientation {\n    top = \"top\",\n    bottom = \"bottom\",\n    right = \"right\",\n    left = \"left\"\n}\n\ninterface Margin {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\ninterface plot extends d3.Selection<SVGGElement, unknown, HTMLElement, any> {\n    \n}\n\nfunction create_container(dimensions: Dimensions): plot {\n\n    // append svg element to the body of the page\n    // set dimensions and position of the svg element\n    let svg = d3\n        .select(\"body\")\n        .append(\"svg\")\n        .attr(\"id\", \"idendro\")\n        .attr(\"width\", dimensions.width)\n        .attr(\"height\", dimensions.height)\n\n    let plot = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\")\n        .attr(\"id\", \"idendro-container\");\n\n    return plot\n}\n\nfunction create_axis(plot: plot, dimensions: Dimensions, dendrogram: Dendrogram) {\n\n    let width_limits, height_limits, height_range, width_range = [0, 0]\n\n    //handle orientation impact on scale ranges & positioning\n    if (dimensions.orientation === Orientation.top || dimensions.orientation === Orientation.bottom) {\n        height_limits = dendrogram.y_limits\n        width_limits = dendrogram.x_limits\n        width_range = [0, dimensions.innerWidth]\n        if (dimensions.orientation === Orientation.top) {\n            height_range = [dimensions.innerHeight, 0]\n        } else {\n            height_range = [0, dimensions.innerHeight]\n        }        \n    } else {\n        height_limits = dendrogram.x_limits\n        width_limits = dendrogram.y_limits                \n        height_range = [dimensions.innerHeight, 0]\n        if (dimensions.orientation === Orientation.left) {\n            width_range = [0, dimensions.innerWidth]\n        } else {\n            width_range = [dimensions.innerWidth, 0]\n        }\n    }\n    \n    //create X-axis\n    var xScale = d3.scaleLinear()        \n    xScale.domain(width_limits).range(width_range)\n    var xAxis = d3.axisBottom(xScale)\n    \n    //create y-axis\n    var yScale = d3.scaleLinear()\n    yScale.domain(height_limits).range(height_range)\n    var yAxis = d3.axisLeft(yScale)\n\n    //add X-axis to plot\n    let xg = plot.append(\"g\")\n        .attr(\"id\", \"x-axis-lines\")            \n        .attr(\"transform\", \"translate(0,\" + dimensions.innerHeight + \")\")\n        .call(xAxis)\n\n    //add Y-axis to plot\n    let yg = plot.append(\"g\")\n    .attr(\"id\", \"y-axis-lines\")            \n    //.attr(\"transform\", \"translate(\" + padding.left + \",0)\")\n    .call(yAxis)\n}\n\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n    // Get the RenderData from the event\n    const data = (event as CustomEvent<RenderData>).detail\n\n    var dendrogram: Dendrogram = data.args['data']\n    let margin: Margin = { top: 20, right: 10, bottom: 20, left: 50 }    \n    let dimensions: Dimensions = {\n        height:  data.args['height'],\n        width: data.args['width'],\n        margin: margin,\n        innerHeight: 0,\n        innerWidth: 0,\n        orientation: data.args['orientation']\n    }\n    dimensions.innerHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom\n    dimensions.innerWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right\n    \n    let plot = create_container(dimensions)\n    create_axis(plot, dimensions, dendrogram)\n\n    Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}