{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport { DataType } from '../type';\n/** @ignore */\n\nexport class JSONVectorAssembler extends Visitor {\n  /** @nocollapse */\n  static assemble() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n  }\n\n  visit(column) {\n    const {\n      data,\n      name,\n      length\n    } = column;\n    const {\n      offset,\n      nullCount,\n      nullBitmap\n    } = data;\n    const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n    const buffers = Object.assign([], data.buffers, {\n      [BufferType.VALIDITY]: undefined\n    });\n    return {\n      'name': name,\n      'count': length,\n      'VALIDITY': DataType.isNull(type) ? undefined : nullCount <= 0 ? Array.from({\n        length\n      }, () => 1) : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n      ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n    };\n  }\n\n  visitNull() {\n    return {};\n  }\n\n  visitBool(_ref) {\n    let {\n      values,\n      offset,\n      length\n    } = _ref;\n    return {\n      'DATA': [...iterateBits(values, offset, length, null, getBool)]\n    };\n  }\n\n  visitInt(vector) {\n    return {\n      'DATA': vector.type.bitWidth < 64 ? [...vector.values] : [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n\n  visitFloat(vector) {\n    return {\n      'DATA': [...vector.values]\n    };\n  }\n\n  visitUtf8(vector) {\n    return {\n      'DATA': [...vector],\n      'OFFSET': [...vector.valueOffsets]\n    };\n  }\n\n  visitBinary(vector) {\n    return {\n      'DATA': [...binaryToString(vector)],\n      OFFSET: [...vector.valueOffsets]\n    };\n  }\n\n  visitFixedSizeBinary(vector) {\n    return {\n      'DATA': [...binaryToString(vector)]\n    };\n  }\n\n  visitDate(vector) {\n    return {\n      'DATA': vector.type.unit === DateUnit.DAY ? [...vector.values] : [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n\n  visitTimestamp(vector) {\n    return {\n      'DATA': [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n\n  visitTime(vector) {\n    return {\n      'DATA': vector.type.unit < TimeUnit.MICROSECOND ? [...vector.values] : [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n\n  visitDecimal(vector) {\n    return {\n      'DATA': [...bigNumsToStrings(vector.values, 4)]\n    };\n  }\n\n  visitList(vector) {\n    return {\n      'OFFSET': [...vector.valueOffsets],\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n\n  visitStruct(vector) {\n    return {\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n\n  visitUnion(vector) {\n    return {\n      'TYPE': [...vector.typeIds],\n      'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n\n  visitInterval(vector) {\n    return {\n      'DATA': [...vector.values]\n    };\n  }\n\n  visitFixedSizeList(vector) {\n    return {\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n\n  visitMap(vector) {\n    return {\n      'OFFSET': [...vector.valueOffsets],\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n\n}\n/** @ignore */\n\nfunction* binaryToString(vector) {\n  for (const octets of vector) {\n    yield octets.reduce((str, byte) => {\n      return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n    }, '').toUpperCase();\n  }\n}\n/** @ignore */\n\n\nfunction* bigNumsToStrings(values, stride) {\n  for (let i = -1, n = values.length / stride; ++i < n;) {\n    yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n  }\n}","map":{"version":3,"sources":["visitor/jsonvectorassembler.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: V<T>): { };\n    visitBool                 <T extends Bool>            (vector: V<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: V<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: V<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: V<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: V<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: V<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: V<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: V<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: V<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: V<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: V<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: V<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: V<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: V<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: V<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}