{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\n/** @ignore */\n\nexport class VectorLoader extends Visitor {\n  constructor(bytes, nodes, buffers, dictionaries) {\n    super();\n    this.nodesIndex = -1;\n    this.buffersIndex = -1;\n    this.bytes = bytes;\n    this.nodes = nodes;\n    this.buffers = buffers;\n    this.dictionaries = dictionaries;\n  }\n\n  visit(node) {\n    return super.visit(node instanceof Field ? node.type : node);\n  }\n\n  visitNull(type) {\n    let {\n      length\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Null(type, 0, length);\n  }\n\n  visitBool(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitInt(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitFloat(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitUtf8(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n  }\n\n  visitBinary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n  }\n\n  visitFixedSizeBinary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitDate(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitTimestamp(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitTime(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitDecimal(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitList(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n  }\n\n  visitStruct(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));\n  }\n\n  visitUnion(type) {\n    return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);\n  }\n\n  visitDenseUnion(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children));\n  }\n\n  visitSparseUnion(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));\n  }\n\n  visitDictionary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));\n  }\n\n  visitInterval(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n\n  visitFixedSizeList(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));\n  }\n\n  visitMap(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n  }\n\n  nextFieldNode() {\n    return this.nodes[++this.nodesIndex];\n  }\n\n  nextBufferRange() {\n    return this.buffers[++this.buffersIndex];\n  }\n\n  readNullBitmap(type, nullCount) {\n    let buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();\n    return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n  }\n\n  readOffsets(type, buffer) {\n    return this.readData(type, buffer);\n  }\n\n  readTypeIds(type, buffer) {\n    return this.readData(type, buffer);\n  }\n\n  readData(_type) {\n    let {\n      length,\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return this.bytes.subarray(offset, offset + length);\n  }\n\n  readDictionary(type) {\n    return this.dictionaries.get(type.id);\n  }\n\n}\n/** @ignore */\n\nexport class JSONVectorLoader extends VectorLoader {\n  constructor(sources, nodes, buffers, dictionaries) {\n    super(new Uint8Array(0), nodes, buffers, dictionaries);\n    this.sources = sources;\n  }\n\n  readNullBitmap(_type, nullCount) {\n    let {\n      offset\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();\n    return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n  }\n\n  readOffsets(_type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n  }\n\n  readTypeIds(type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n  }\n\n  readData(type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    const {\n      sources\n    } = this;\n\n    if (DataType.isTimestamp(type)) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if (DataType.isDecimal(type)) {\n      return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n    } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n      return binaryDataFromJSON(sources[offset]);\n    } else if (DataType.isBool(type)) {\n      return packBools(sources[offset]);\n    } else if (DataType.isUtf8(type)) {\n      return encodeUtf8(sources[offset].join(''));\n    }\n\n    return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map(x => +x)));\n  }\n\n}\n/** @ignore */\n\nfunction binaryDataFromJSON(values) {\n  // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n  // There are definitely more efficient ways to do this... but it gets the\n  // job done.\n  const joined = values.join('');\n  const data = new Uint8Array(joined.length / 2);\n\n  for (let i = 0; i < joined.length; i += 2) {\n    data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n  }\n\n  return data;\n}","map":{"version":3,"sources":["visitor/vectorloader.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n"]},"metadata":{},"sourceType":"module"}