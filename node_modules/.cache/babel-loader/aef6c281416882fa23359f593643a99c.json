{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport { DataType } from '../type';\n/** @ignore */\n\nexport class VectorAssembler extends Visitor {\n  constructor() {\n    super();\n    this._byteLength = 0;\n    this._nodes = [];\n    this._buffers = [];\n    this._bufferRegions = [];\n  }\n  /** @nocollapse */\n\n\n  static assemble() {\n    const assembler = new VectorAssembler();\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n    const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n    return assembleResult;\n  }\n\n  visit(vector) {\n    if (!DataType.isDictionary(vector.type)) {\n      const {\n        data,\n        length,\n        nullCount\n      } = vector;\n\n      if (length > 2147483647) {\n        /* istanbul ignore next */\n        throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n      }\n\n      if (!DataType.isNull(vector.type)) {\n        addBuffer.call(this, nullCount <= 0 ? new Uint8Array(0) // placeholder validity buffer\n        : truncateBitmap(data.offset, length, data.nullBitmap));\n      }\n\n      this.nodes.push(new FieldNode(length, nullCount));\n    }\n\n    return super.visit(vector);\n  }\n\n  visitNull(_nullV) {\n    return this;\n  }\n\n  visitDictionary(vector) {\n    // Assemble the indices here, Dictionary assembled separately.\n    return this.visit(vector.indices);\n  }\n\n  get nodes() {\n    return this._nodes;\n  }\n\n  get buffers() {\n    return this._buffers;\n  }\n\n  get byteLength() {\n    return this._byteLength;\n  }\n\n  get bufferRegions() {\n    return this._bufferRegions;\n  }\n\n}\n/** @ignore */\n\nfunction addBuffer(values) {\n  const byteLength = values.byteLength + 7 & ~7; // Round up to a multiple of 8\n\n  this.buffers.push(values);\n  this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n  this._byteLength += byteLength;\n  return this;\n}\n/** @ignore */\n\n\nfunction assembleUnion(vector) {\n  const {\n    type,\n    length,\n    typeIds,\n    valueOffsets\n  } = vector; // All Union Vectors have a typeIds buffer\n\n  addBuffer.call(this, typeIds); // If this is a Sparse Union, treat it like all other Nested types\n\n  if (type.mode === UnionMode.Sparse) {\n    return assembleNestedVector.call(this, vector);\n  } else if (type.mode === UnionMode.Dense) {\n    // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n    if (vector.offset <= 0) {\n      // If the Vector hasn't been sliced, write the existing valueOffsets\n      addBuffer.call(this, valueOffsets); // We can treat this like all other Nested types\n\n      return assembleNestedVector.call(this, vector);\n    } else {\n      // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n      // each child vector, we need to \"rebase\" the valueOffsets for each child\n      // Union typeIds are not necessary 0-indexed\n      const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n      const childLengths = new Int32Array(maxChildTypeId + 1); // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n\n      const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n      const shiftedOffsets = new Int32Array(length); // If we have a non-zero offset, then the value offsets do not start at\n      // zero. We must a) create a new offsets array with shifted offsets and\n      // b) slice the values array accordingly\n\n      const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n\n      for (let typeId, shift, index = -1; ++index < length;) {\n        if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n          shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n        }\n\n        shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n        ++childLengths[typeId];\n      }\n\n      addBuffer.call(this, shiftedOffsets); // Slice and visit children accordingly\n\n      for (let child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n        if (child = vector.getChildAt(childIndex)) {\n          const typeId = type.typeIds[childIndex];\n          const childLength = Math.min(length, childLengths[typeId]);\n          this.visit(child.slice(childOffsets[typeId], childLength));\n        }\n      }\n    }\n  }\n\n  return this;\n}\n/** @ignore */\n\n\nfunction assembleBoolVector(vector) {\n  // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n  let values;\n\n  if (vector.nullCount >= vector.length) {\n    // If all values are null, just insert a placeholder empty data buffer (fastest path)\n    return addBuffer.call(this, new Uint8Array(0));\n  } else if ((values = vector.values) instanceof Uint8Array) {\n    // If values is already a Uint8Array, slice the bitmap (fast path)\n    return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n  } // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n  // values as bools and re-pack them into a Uint8Array. This code isn't\n  // reachable unless you're trying to manipulate the Data internals,\n  // we we're only doing this for safety.\n\n  /* istanbul ignore next */\n\n\n  return addBuffer.call(this, packBools(vector));\n}\n/** @ignore */\n\n\nfunction assembleFlatVector(vector) {\n  return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n/** @ignore */\n\n\nfunction assembleFlatListVector(vector) {\n  const {\n    length,\n    values,\n    valueOffsets\n  } = vector;\n  const firstOffset = valueOffsets[0];\n  const lastOffset = valueOffsets[length];\n  const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset); // Push in the order FlatList types read their buffers\n\n  addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n\n  addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n\n  return this;\n}\n/** @ignore */\n\n\nfunction assembleListVector(vector) {\n  const {\n    length,\n    valueOffsets\n  } = vector; // If we have valueOffsets (MapVector, ListVector), push that buffer first\n\n  if (valueOffsets) {\n    addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n  } // Then insert the List's values child\n\n\n  return this.visit(vector.getChildAt(0));\n}\n/** @ignore */\n\n\nfunction assembleNestedVector(vector) {\n  return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool = assembleBoolVector;\nVectorAssembler.prototype.visitInt = assembleFlatVector;\nVectorAssembler.prototype.visitFloat = assembleFlatVector;\nVectorAssembler.prototype.visitUtf8 = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;\nVectorAssembler.prototype.visitDate = assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp = assembleFlatVector;\nVectorAssembler.prototype.visitTime = assembleFlatVector;\nVectorAssembler.prototype.visitDecimal = assembleFlatVector;\nVectorAssembler.prototype.visitList = assembleListVector;\nVectorAssembler.prototype.visitStruct = assembleNestedVector;\nVectorAssembler.prototype.visitUnion = assembleUnion;\nVectorAssembler.prototype.visitInterval = assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList = assembleListVector;\nVectorAssembler.prototype.visitMap = assembleListVector;","map":{"version":3,"sources":["visitor/vectorassembler.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n"]},"metadata":{},"sourceType":"module"}