{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType } from './type';\nexport class Visitor {\n  visitMany(nodes) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return nodes.map((node, i) => this.visit(node, ...args.map(x => x[i])));\n  }\n\n  visit() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return this.getVisitFn(args[0], false).apply(this, args);\n  }\n\n  getVisitFn(node) {\n    let throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return getVisitFn(this, node, throwIfNotFound);\n  }\n\n  visitNull(_node) {\n    return null;\n  }\n\n  visitBool(_node) {\n    return null;\n  }\n\n  visitInt(_node) {\n    return null;\n  }\n\n  visitFloat(_node) {\n    return null;\n  }\n\n  visitUtf8(_node) {\n    return null;\n  }\n\n  visitBinary(_node) {\n    return null;\n  }\n\n  visitFixedSizeBinary(_node) {\n    return null;\n  }\n\n  visitDate(_node) {\n    return null;\n  }\n\n  visitTimestamp(_node) {\n    return null;\n  }\n\n  visitTime(_node) {\n    return null;\n  }\n\n  visitDecimal(_node) {\n    return null;\n  }\n\n  visitList(_node) {\n    return null;\n  }\n\n  visitStruct(_node) {\n    return null;\n  }\n\n  visitUnion(_node) {\n    return null;\n  }\n\n  visitDictionary(_node) {\n    return null;\n  }\n\n  visitInterval(_node) {\n    return null;\n  }\n\n  visitFixedSizeList(_node) {\n    return null;\n  }\n\n  visitMap(_node) {\n    return null;\n  }\n\n}\n/** @ignore */\n\nfunction getVisitFn(visitor, node) {\n  let throwIfNotFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let fn = null;\n  let dtype = Type.NONE; // tslint:disable\n\n  if (node instanceof Data) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof Vector) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof DataType) {\n    dtype = inferDType(node);\n  } else if (typeof (dtype = node) !== 'number') {\n    dtype = Type[node];\n  }\n\n  switch (dtype) {\n    case Type.Null:\n      fn = visitor.visitNull;\n      break;\n\n    case Type.Bool:\n      fn = visitor.visitBool;\n      break;\n\n    case Type.Int:\n      fn = visitor.visitInt;\n      break;\n\n    case Type.Int8:\n      fn = visitor.visitInt8 || visitor.visitInt;\n      break;\n\n    case Type.Int16:\n      fn = visitor.visitInt16 || visitor.visitInt;\n      break;\n\n    case Type.Int32:\n      fn = visitor.visitInt32 || visitor.visitInt;\n      break;\n\n    case Type.Int64:\n      fn = visitor.visitInt64 || visitor.visitInt;\n      break;\n\n    case Type.Uint8:\n      fn = visitor.visitUint8 || visitor.visitInt;\n      break;\n\n    case Type.Uint16:\n      fn = visitor.visitUint16 || visitor.visitInt;\n      break;\n\n    case Type.Uint32:\n      fn = visitor.visitUint32 || visitor.visitInt;\n      break;\n\n    case Type.Uint64:\n      fn = visitor.visitUint64 || visitor.visitInt;\n      break;\n\n    case Type.Float:\n      fn = visitor.visitFloat;\n      break;\n\n    case Type.Float16:\n      fn = visitor.visitFloat16 || visitor.visitFloat;\n      break;\n\n    case Type.Float32:\n      fn = visitor.visitFloat32 || visitor.visitFloat;\n      break;\n\n    case Type.Float64:\n      fn = visitor.visitFloat64 || visitor.visitFloat;\n      break;\n\n    case Type.Utf8:\n      fn = visitor.visitUtf8;\n      break;\n\n    case Type.Binary:\n      fn = visitor.visitBinary;\n      break;\n\n    case Type.FixedSizeBinary:\n      fn = visitor.visitFixedSizeBinary;\n      break;\n\n    case Type.Date:\n      fn = visitor.visitDate;\n      break;\n\n    case Type.DateDay:\n      fn = visitor.visitDateDay || visitor.visitDate;\n      break;\n\n    case Type.DateMillisecond:\n      fn = visitor.visitDateMillisecond || visitor.visitDate;\n      break;\n\n    case Type.Timestamp:\n      fn = visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampSecond:\n      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampMillisecond:\n      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampMicrosecond:\n      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampNanosecond:\n      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n      break;\n\n    case Type.Time:\n      fn = visitor.visitTime;\n      break;\n\n    case Type.TimeSecond:\n      fn = visitor.visitTimeSecond || visitor.visitTime;\n      break;\n\n    case Type.TimeMillisecond:\n      fn = visitor.visitTimeMillisecond || visitor.visitTime;\n      break;\n\n    case Type.TimeMicrosecond:\n      fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n      break;\n\n    case Type.TimeNanosecond:\n      fn = visitor.visitTimeNanosecond || visitor.visitTime;\n      break;\n\n    case Type.Decimal:\n      fn = visitor.visitDecimal;\n      break;\n\n    case Type.List:\n      fn = visitor.visitList;\n      break;\n\n    case Type.Struct:\n      fn = visitor.visitStruct;\n      break;\n\n    case Type.Union:\n      fn = visitor.visitUnion;\n      break;\n\n    case Type.DenseUnion:\n      fn = visitor.visitDenseUnion || visitor.visitUnion;\n      break;\n\n    case Type.SparseUnion:\n      fn = visitor.visitSparseUnion || visitor.visitUnion;\n      break;\n\n    case Type.Dictionary:\n      fn = visitor.visitDictionary;\n      break;\n\n    case Type.Interval:\n      fn = visitor.visitInterval;\n      break;\n\n    case Type.IntervalDayTime:\n      fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n      break;\n\n    case Type.IntervalYearMonth:\n      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n      break;\n\n    case Type.FixedSizeList:\n      fn = visitor.visitFixedSizeList;\n      break;\n\n    case Type.Map:\n      fn = visitor.visitMap;\n      break;\n  }\n\n  if (typeof fn === 'function') return fn;\n  if (!throwIfNotFound) return () => null;\n  throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n/** @ignore */\n\n\nfunction inferDType(type) {\n  switch (type.typeId) {\n    case Type.Null:\n      return Type.Null;\n\n    case Type.Int:\n      const {\n        bitWidth,\n        isSigned\n      } = type;\n\n      switch (bitWidth) {\n        case 8:\n          return isSigned ? Type.Int8 : Type.Uint8;\n\n        case 16:\n          return isSigned ? Type.Int16 : Type.Uint16;\n\n        case 32:\n          return isSigned ? Type.Int32 : Type.Uint32;\n\n        case 64:\n          return isSigned ? Type.Int64 : Type.Uint64;\n      }\n\n      return Type.Int;\n\n    case Type.Float:\n      switch (type.precision) {\n        case Precision.HALF:\n          return Type.Float16;\n\n        case Precision.SINGLE:\n          return Type.Float32;\n\n        case Precision.DOUBLE:\n          return Type.Float64;\n      }\n\n      return Type.Float;\n\n    case Type.Binary:\n      return Type.Binary;\n\n    case Type.Utf8:\n      return Type.Utf8;\n\n    case Type.Bool:\n      return Type.Bool;\n\n    case Type.Decimal:\n      return Type.Decimal;\n\n    case Type.Time:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimeSecond;\n\n        case TimeUnit.MILLISECOND:\n          return Type.TimeMillisecond;\n\n        case TimeUnit.MICROSECOND:\n          return Type.TimeMicrosecond;\n\n        case TimeUnit.NANOSECOND:\n          return Type.TimeNanosecond;\n      }\n\n      return Type.Time;\n\n    case Type.Timestamp:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimestampSecond;\n\n        case TimeUnit.MILLISECOND:\n          return Type.TimestampMillisecond;\n\n        case TimeUnit.MICROSECOND:\n          return Type.TimestampMicrosecond;\n\n        case TimeUnit.NANOSECOND:\n          return Type.TimestampNanosecond;\n      }\n\n      return Type.Timestamp;\n\n    case Type.Date:\n      switch (type.unit) {\n        case DateUnit.DAY:\n          return Type.DateDay;\n\n        case DateUnit.MILLISECOND:\n          return Type.DateMillisecond;\n      }\n\n      return Type.Date;\n\n    case Type.Interval:\n      switch (type.unit) {\n        case IntervalUnit.DAY_TIME:\n          return Type.IntervalDayTime;\n\n        case IntervalUnit.YEAR_MONTH:\n          return Type.IntervalYearMonth;\n      }\n\n      return Type.Interval;\n\n    case Type.Map:\n      return Type.Map;\n\n    case Type.List:\n      return Type.List;\n\n    case Type.Struct:\n      return Type.Struct;\n\n    case Type.Union:\n      switch (type.mode) {\n        case UnionMode.Dense:\n          return Type.DenseUnion;\n\n        case UnionMode.Sparse:\n          return Type.SparseUnion;\n      }\n\n      return Type.Union;\n\n    case Type.FixedSizeBinary:\n      return Type.FixedSizeBinary;\n\n    case Type.FixedSizeList:\n      return Type.FixedSizeList;\n\n    case Type.Dictionary:\n      return Type.Dictionary;\n  }\n\n  throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n} // Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n\n\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;","map":{"version":3,"sources":["visitor.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAS,IAAT,QAAqB,QAArB;AACA,SAAS,MAAT,QAAuB,UAAvB;AACA,SAAS,IAAT,EAAe,SAAf,EAA0B,QAA1B,EAAoC,QAApC,EAA8C,YAA9C,EAA4D,SAA5D,QAA6E,QAA7E;AACA,SAAS,QAAT,QAA+E,QAA/E;AAEA,OAAM,MAAgB,OAAhB,CAAuB;EAClB,SAAS,CAAC,KAAD,EAA+B;IAAA,kCAAb,IAAa;MAAb,IAAa;IAAA;;IAC3C,OAAO,KAAK,CAAC,GAAN,CAAU,CAAC,IAAD,EAAO,CAAP,KAAa,KAAK,KAAL,CAAW,IAAX,EAAiB,GAAG,IAAI,CAAC,GAAL,CAAU,CAAD,IAAO,CAAC,CAAC,CAAD,CAAjB,CAApB,CAAvB,CAAP;EACH;;EACM,KAAK,GAAe;IAAA,mCAAX,IAAW;MAAX,IAAW;IAAA;;IACvB,OAAO,KAAK,UAAL,CAAgB,IAAI,CAAC,CAAD,CAApB,EAAyB,KAAzB,EAAgC,KAAhC,CAAsC,IAAtC,EAA4C,IAA5C,CAAP;EACH;;EACM,UAAU,CAAC,IAAD,EAAkC;IAAA,IAAtB,eAAsB,uEAAJ,IAAI;IAC/C,OAAO,UAAU,CAAC,IAAD,EAAO,IAAP,EAAa,eAAb,CAAjB;EACH;;EACM,SAAS,CAAa,KAAb,EAAwC;IAAS,OAAO,IAAP;EAAc;;EACxE,SAAS,CAAa,KAAb,EAAwC;IAAS,OAAO,IAAP;EAAc;;EACxE,QAAQ,CAAc,KAAd,EAAyC;IAAS,OAAO,IAAP;EAAc;;EACxE,UAAU,CAAY,KAAZ,EAAuC;IAAS,OAAO,IAAP;EAAc;;EACxE,SAAS,CAAa,KAAb,EAAwC;IAAS,OAAO,IAAP;EAAc;;EACxE,WAAW,CAAW,KAAX,EAAsC;IAAS,OAAO,IAAP;EAAc;;EACxE,oBAAoB,CAAE,KAAF,EAA6B;IAAS,OAAO,IAAP;EAAc;;EACxE,SAAS,CAAa,KAAb,EAAwC;IAAS,OAAO,IAAP;EAAc;;EACxE,cAAc,CAAQ,KAAR,EAAmC;IAAS,OAAO,IAAP;EAAc;;EACxE,SAAS,CAAa,KAAb,EAAwC;IAAS,OAAO,IAAP;EAAc;;EACxE,YAAY,CAAU,KAAV,EAAqC;IAAS,OAAO,IAAP;EAAc;;EACxE,SAAS,CAAa,KAAb,EAAwC;IAAS,OAAO,IAAP;EAAc;;EACxE,WAAW,CAAW,KAAX,EAAsC;IAAS,OAAO,IAAP;EAAc;;EACxE,UAAU,CAAY,KAAZ,EAAuC;IAAS,OAAO,IAAP;EAAc;;EACxE,eAAe,CAAO,KAAP,EAAkC;IAAS,OAAO,IAAP;EAAc;;EACxE,aAAa,CAAS,KAAT,EAAoC;IAAS,OAAO,IAAP;EAAc;;EACxE,kBAAkB,CAAI,KAAJ,EAA+B;IAAS,OAAO,IAAP;EAAc;;EACxE,QAAQ,CAAc,KAAd,EAAyC;IAAS,OAAO,IAAP;EAAc;;AA3BtD;AA8B7B;;AACA,SAAS,UAAT,CAAwC,OAAxC,EAA0D,IAA1D,EAA2F;EAAA,IAAtB,eAAsB,uEAAJ,IAAI;EACvF,IAAI,EAAE,GAAQ,IAAd;EACA,IAAI,KAAK,GAAe,IAAI,CAAC,IAA7B,CAFuF,CAGvF;;EACA,IAAS,IAAI,YAAY,IAAzB,EAAmC;IAAE,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,IAAN,CAAlB;EAAqC,CAA1E,MACK,IAAI,IAAI,YAAY,MAApB,EAA8B;IAAE,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,IAAN,CAAlB;EAAqC,CAArE,MACA,IAAI,IAAI,YAAY,QAApB,EAA8B;IAAE,KAAK,GAAG,UAAU,CAAC,IAAD,CAAlB;EAAqC,CAArE,MACA,IAAI,QAAQ,KAAK,GAAG,IAAhB,MAA0B,QAA9B,EAAwC;IAAE,KAAK,GAAG,IAAI,CAAC,IAAD,CAAZ;EAA0C;;EAEzF,QAAQ,KAAR;IACI,KAAK,IAAI,CAAC,IAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,SAAb;MAAwB;;IACxD,KAAK,IAAI,CAAC,IAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,SAAb;MAAwB;;IACxD,KAAK,IAAI,CAAC,GAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,QAAb;MAAuB;;IACvD,KAAK,IAAI,CAAC,IAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,SAAR,IAAqB,OAAO,CAAC,QAAlC;MAA4C;;IAC5E,KAAK,IAAI,CAAC,KAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,UAAR,IAAsB,OAAO,CAAC,QAAnC;MAA6C;;IAC7E,KAAK,IAAI,CAAC,KAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,UAAR,IAAsB,OAAO,CAAC,QAAnC;MAA6C;;IAC7E,KAAK,IAAI,CAAC,KAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,UAAR,IAAsB,OAAO,CAAC,QAAnC;MAA6C;;IAC7E,KAAK,IAAI,CAAC,KAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,UAAR,IAAsB,OAAO,CAAC,QAAnC;MAA6C;;IAC7E,KAAK,IAAI,CAAC,MAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,WAAR,IAAuB,OAAO,CAAC,QAApC;MAA8C;;IAC9E,KAAK,IAAI,CAAC,MAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,WAAR,IAAuB,OAAO,CAAC,QAApC;MAA8C;;IAC9E,KAAK,IAAI,CAAC,MAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,WAAR,IAAuB,OAAO,CAAC,QAApC;MAA8C;;IAC9E,KAAK,IAAI,CAAC,KAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,UAAb;MAAyB;;IACzD,KAAK,IAAI,CAAC,OAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,YAAR,IAAwB,OAAO,CAAC,UAArC;MAAiD;;IACjF,KAAK,IAAI,CAAC,OAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,YAAR,IAAwB,OAAO,CAAC,UAArC;MAAiD;;IACjF,KAAK,IAAI,CAAC,OAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,YAAR,IAAwB,OAAO,CAAC,UAArC;MAAiD;;IACjF,KAAK,IAAI,CAAC,IAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,SAAb;MAAwB;;IACxD,KAAK,IAAI,CAAC,MAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,WAAb;MAA0B;;IAC1D,KAAK,IAAI,CAAC,eAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,oBAAb;MAAmC;;IACnE,KAAK,IAAI,CAAC,IAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,SAAb;MAAwB;;IACxD,KAAK,IAAI,CAAC,OAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,YAAR,IAAwB,OAAO,CAAC,SAArC;MAAgD;;IAChF,KAAK,IAAI,CAAC,eAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,oBAAR,IAAgC,OAAO,CAAC,SAA7C;MAAwD;;IACxF,KAAK,IAAI,CAAC,SAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,cAAb;MAA6B;;IAC7D,KAAK,IAAI,CAAC,eAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,oBAAR,IAAgC,OAAO,CAAC,cAA7C;MAA6D;;IAC7F,KAAK,IAAI,CAAC,oBAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,yBAAR,IAAqC,OAAO,CAAC,cAAlD;MAAkE;;IAClG,KAAK,IAAI,CAAC,oBAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,yBAAR,IAAqC,OAAO,CAAC,cAAlD;MAAkE;;IAClG,KAAK,IAAI,CAAC,mBAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,wBAAR,IAAoC,OAAO,CAAC,cAAjD;MAAiE;;IACjG,KAAK,IAAI,CAAC,IAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,SAAb;MAAwB;;IACxD,KAAK,IAAI,CAAC,UAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,eAAR,IAA2B,OAAO,CAAC,SAAxC;MAAmD;;IACnF,KAAK,IAAI,CAAC,eAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,oBAAR,IAAgC,OAAO,CAAC,SAA7C;MAAwD;;IACxF,KAAK,IAAI,CAAC,eAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,oBAAR,IAAgC,OAAO,CAAC,SAA7C;MAAwD;;IACxF,KAAK,IAAI,CAAC,cAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,mBAAR,IAA+B,OAAO,CAAC,SAA5C;MAAuD;;IACvF,KAAK,IAAI,CAAC,OAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,YAAb;MAA2B;;IAC3D,KAAK,IAAI,CAAC,IAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,SAAb;MAAwB;;IACxD,KAAK,IAAI,CAAC,MAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,WAAb;MAA0B;;IAC1D,KAAK,IAAI,CAAC,KAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,UAAb;MAAyB;;IACzD,KAAK,IAAI,CAAC,UAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,eAAR,IAA2B,OAAO,CAAC,UAAxC;MAAoD;;IACpF,KAAK,IAAI,CAAC,WAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,gBAAR,IAA4B,OAAO,CAAC,UAAzC;MAAqD;;IACrF,KAAK,IAAI,CAAC,UAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,eAAb;MAA8B;;IAC9D,KAAK,IAAI,CAAC,QAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,aAAb;MAA4B;;IAC5D,KAAK,IAAI,CAAC,eAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,oBAAR,IAAgC,OAAO,CAAC,aAA7C;MAA4D;;IAC5F,KAAK,IAAI,CAAC,iBAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,sBAAR,IAAkC,OAAO,CAAC,aAA/C;MAA8D;;IAC9F,KAAK,IAAI,CAAC,aAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,kBAAb;MAAiC;;IACjE,KAAK,IAAI,CAAC,GAAV;MAAgC,EAAE,GAAG,OAAO,CAAC,QAAb;MAAuB;EA3C3D;;EA6CA,IAAI,OAAO,EAAP,KAAc,UAAlB,EAA8B,OAAO,EAAP;EAC9B,IAAI,CAAC,eAAL,EAAsB,OAAO,MAAM,IAAb;EACtB,MAAM,IAAI,KAAJ,CAAU,sBAAsB,IAAI,CAAC,KAAD,CAAO,GAA3C,CAAN;AACH;AAED;;;AACA,SAAS,UAAT,CAAwC,IAAxC,EAA+C;EAC3C,QAAQ,IAAI,CAAC,MAAb;IACI,KAAK,IAAI,CAAC,IAAV;MAAgB,OAAO,IAAI,CAAC,IAAZ;;IAChB,KAAK,IAAI,CAAC,GAAV;MACI,MAAM;QAAE,QAAF;QAAY;MAAZ,IAA0B,IAAhC;;MACA,QAAQ,QAAR;QACI,KAAM,CAAN;UAAS,OAAO,QAAQ,GAAG,IAAI,CAAC,IAAR,GAAgB,IAAI,CAAC,KAApC;;QACT,KAAK,EAAL;UAAS,OAAO,QAAQ,GAAG,IAAI,CAAC,KAAR,GAAgB,IAAI,CAAC,MAApC;;QACT,KAAK,EAAL;UAAS,OAAO,QAAQ,GAAG,IAAI,CAAC,KAAR,GAAgB,IAAI,CAAC,MAApC;;QACT,KAAK,EAAL;UAAS,OAAO,QAAQ,GAAG,IAAI,CAAC,KAAR,GAAgB,IAAI,CAAC,MAApC;MAJb;;MAMA,OAAO,IAAI,CAAC,GAAZ;;IACJ,KAAK,IAAI,CAAC,KAAV;MACI,QAAQ,IAAqB,CAAC,SAA9B;QACI,KAAK,SAAS,CAAC,IAAf;UAAqB,OAAO,IAAI,CAAC,OAAZ;;QACrB,KAAK,SAAS,CAAC,MAAf;UAAuB,OAAO,IAAI,CAAC,OAAZ;;QACvB,KAAK,SAAS,CAAC,MAAf;UAAuB,OAAO,IAAI,CAAC,OAAZ;MAH3B;;MAKA,OAAO,IAAI,CAAC,KAAZ;;IACJ,KAAK,IAAI,CAAC,MAAV;MAAkB,OAAO,IAAI,CAAC,MAAZ;;IAClB,KAAK,IAAI,CAAC,IAAV;MAAgB,OAAO,IAAI,CAAC,IAAZ;;IAChB,KAAK,IAAI,CAAC,IAAV;MAAgB,OAAO,IAAI,CAAC,IAAZ;;IAChB,KAAK,IAAI,CAAC,OAAV;MAAmB,OAAO,IAAI,CAAC,OAAZ;;IACnB,KAAK,IAAI,CAAC,IAAV;MACI,QAAS,IAAoB,CAAC,IAA9B;QACI,KAAK,QAAQ,CAAC,MAAd;UAAsB,OAAO,IAAI,CAAC,UAAZ;;QACtB,KAAK,QAAQ,CAAC,WAAd;UAA2B,OAAO,IAAI,CAAC,eAAZ;;QAC3B,KAAK,QAAQ,CAAC,WAAd;UAA2B,OAAO,IAAI,CAAC,eAAZ;;QAC3B,KAAK,QAAQ,CAAC,UAAd;UAA0B,OAAO,IAAI,CAAC,cAAZ;MAJ9B;;MAMA,OAAO,IAAI,CAAC,IAAZ;;IACJ,KAAK,IAAI,CAAC,SAAV;MACI,QAAS,IAAyB,CAAC,IAAnC;QACI,KAAK,QAAQ,CAAC,MAAd;UAAsB,OAAO,IAAI,CAAC,eAAZ;;QACtB,KAAK,QAAQ,CAAC,WAAd;UAA2B,OAAO,IAAI,CAAC,oBAAZ;;QAC3B,KAAK,QAAQ,CAAC,WAAd;UAA2B,OAAO,IAAI,CAAC,oBAAZ;;QAC3B,KAAK,QAAQ,CAAC,UAAd;UAA0B,OAAO,IAAI,CAAC,mBAAZ;MAJ9B;;MAMA,OAAO,IAAI,CAAC,SAAZ;;IACJ,KAAK,IAAI,CAAC,IAAV;MACI,QAAS,IAAqB,CAAC,IAA/B;QACI,KAAK,QAAQ,CAAC,GAAd;UAAmB,OAAO,IAAI,CAAC,OAAZ;;QACnB,KAAK,QAAQ,CAAC,WAAd;UAA2B,OAAO,IAAI,CAAC,eAAZ;MAF/B;;MAIA,OAAO,IAAI,CAAC,IAAZ;;IACJ,KAAK,IAAI,CAAC,QAAV;MACI,QAAS,IAAwB,CAAC,IAAlC;QACI,KAAK,YAAY,CAAC,QAAlB;UAA4B,OAAO,IAAI,CAAC,eAAZ;;QAC5B,KAAK,YAAY,CAAC,UAAlB;UAA8B,OAAO,IAAI,CAAC,iBAAZ;MAFlC;;MAIA,OAAO,IAAI,CAAC,QAAZ;;IACJ,KAAK,IAAI,CAAC,GAAV;MAAe,OAAO,IAAI,CAAC,GAAZ;;IACf,KAAK,IAAI,CAAC,IAAV;MAAgB,OAAO,IAAI,CAAC,IAAZ;;IAChB,KAAK,IAAI,CAAC,MAAV;MAAkB,OAAO,IAAI,CAAC,MAAZ;;IAClB,KAAK,IAAI,CAAC,KAAV;MACI,QAAS,IAAqB,CAAC,IAA/B;QACI,KAAK,SAAS,CAAC,KAAf;UAAsB,OAAO,IAAI,CAAC,UAAZ;;QACtB,KAAK,SAAS,CAAC,MAAf;UAAuB,OAAO,IAAI,CAAC,WAAZ;MAF3B;;MAIA,OAAO,IAAI,CAAC,KAAZ;;IACJ,KAAK,IAAI,CAAC,eAAV;MAA2B,OAAO,IAAI,CAAC,eAAZ;;IAC3B,KAAK,IAAI,CAAC,aAAV;MAAyB,OAAO,IAAI,CAAC,aAAZ;;IACzB,KAAK,IAAI,CAAC,UAAV;MAAsB,OAAO,IAAI,CAAC,UAAZ;EA7D1B;;EA+DA,MAAM,IAAI,KAAJ,CAAU,sBAAsB,IAAI,CAAC,IAAI,CAAC,MAAN,CAAa,GAAjD,CAAN;AACH,C,CAgDD;AACA;;;AACC,OAAO,CAAC,SAAR,CAA0B,SAA1B,GAAsC,IAAtC;AACA,OAAO,CAAC,SAAR,CAA0B,UAA1B,GAAuC,IAAvC;AACA,OAAO,CAAC,SAAR,CAA0B,UAA1B,GAAuC,IAAvC;AACA,OAAO,CAAC,SAAR,CAA0B,UAA1B,GAAuC,IAAvC;AACA,OAAO,CAAC,SAAR,CAA0B,UAA1B,GAAuC,IAAvC;AACA,OAAO,CAAC,SAAR,CAA0B,WAA1B,GAAwC,IAAxC;AACA,OAAO,CAAC,SAAR,CAA0B,WAA1B,GAAwC,IAAxC;AACA,OAAO,CAAC,SAAR,CAA0B,WAA1B,GAAwC,IAAxC;AACA,OAAO,CAAC,SAAR,CAA0B,YAA1B,GAAyC,IAAzC;AACA,OAAO,CAAC,SAAR,CAA0B,YAA1B,GAAyC,IAAzC;AACA,OAAO,CAAC,SAAR,CAA0B,YAA1B,GAAyC,IAAzC;AACA,OAAO,CAAC,SAAR,CAA0B,YAA1B,GAAyC,IAAzC;AACA,OAAO,CAAC,SAAR,CAA0B,oBAA1B,GAAiD,IAAjD;AACA,OAAO,CAAC,SAAR,CAA0B,oBAA1B,GAAiD,IAAjD;AACA,OAAO,CAAC,SAAR,CAA0B,yBAA1B,GAAsD,IAAtD;AACA,OAAO,CAAC,SAAR,CAA0B,yBAA1B,GAAsD,IAAtD;AACA,OAAO,CAAC,SAAR,CAA0B,wBAA1B,GAAqD,IAArD;AACA,OAAO,CAAC,SAAR,CAA0B,eAA1B,GAA4C,IAA5C;AACA,OAAO,CAAC,SAAR,CAA0B,oBAA1B,GAAiD,IAAjD;AACA,OAAO,CAAC,SAAR,CAA0B,oBAA1B,GAAiD,IAAjD;AACA,OAAO,CAAC,SAAR,CAA0B,mBAA1B,GAAgD,IAAhD;AACA,OAAO,CAAC,SAAR,CAA0B,eAA1B,GAA4C,IAA5C;AACA,OAAO,CAAC,SAAR,CAA0B,gBAA1B,GAA6C,IAA7C;AACA,OAAO,CAAC,SAAR,CAA0B,oBAA1B,GAAiD,IAAjD;AACA,OAAO,CAAC,SAAR,CAA0B,sBAA1B,GAAmD,IAAnD","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n"]},"metadata":{},"sourceType":"module"}