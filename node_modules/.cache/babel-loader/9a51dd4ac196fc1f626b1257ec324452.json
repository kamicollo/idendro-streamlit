{"ast":null,"code":"import _wrapAsyncGenerator from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _awaitAsyncGenerator from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _asyncGeneratorDelegate from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(toArrayBufferViewIterator);\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n/** @ignore */\n\nvar SharedArrayBuf = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer;\n/** @ignore */\n\nfunction collapseContiguousByteRanges(chunks) {\n  var result = chunks[0] ? [chunks[0]] : [];\n  var xOffset, yOffset, xLen, yLen;\n\n  for (var x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n    x = result[j];\n    y = chunks[i]; // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n\n    if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n\n    var _x6 = x;\n    xOffset = _x6.byteOffset;\n    xLen = _x6.byteLength;\n    var _y = y;\n    yOffset = _y.byteOffset;\n    yLen = _y.byteLength;\n\n    // continue if the byte ranges of x and y aren't contiguous\n    if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n\n    result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n  }\n\n  return result;\n}\n/** @ignore */\n\n\nexport function memcpy(target, source) {\n  var targetByteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var sourceByteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : source.byteLength;\n  var targetByteLength = target.byteLength;\n  var dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n  var src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n  dst.set(src, targetByteOffset);\n  return target;\n}\n/** @ignore */\n\nexport function joinUint8Arrays(chunks, size) {\n  // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n  // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n  // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n  var result = collapseContiguousByteRanges(chunks);\n  var byteLength = result.reduce(function (x, b) {\n    return x + b.byteLength;\n  }, 0);\n  var source, sliced, buffer;\n  var offset = 0,\n      index = -1,\n      length = Math.min(size || Infinity, byteLength);\n\n  for (var n = result.length; ++index < n;) {\n    source = result[index];\n    sliced = source.subarray(0, Math.min(source.length, length - offset));\n\n    if (length <= offset + sliced.length) {\n      if (sliced.length < source.length) {\n        result[index] = source.subarray(sliced.length);\n      } else if (sliced.length === source.length) {\n        index++;\n      }\n\n      buffer ? memcpy(buffer, sliced, offset) : buffer = sliced;\n      break;\n    }\n\n    memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n    offset += sliced.length;\n  }\n\n  return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\nexport function toArrayBufferView(ArrayBufferViewCtor, input) {\n  var value = isIteratorResult(input) ? input.value : input;\n\n  if (value instanceof ArrayBufferViewCtor) {\n    if (ArrayBufferViewCtor === Uint8Array) {\n      // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n      // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n      return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n    }\n\n    return value;\n  }\n\n  if (!value) {\n    return new ArrayBufferViewCtor(0);\n  }\n\n  if (typeof value === 'string') {\n    value = encodeUtf8(value);\n  }\n\n  if (value instanceof ArrayBuffer) {\n    return new ArrayBufferViewCtor(value);\n  }\n\n  if (value instanceof SharedArrayBuf) {\n    return new ArrayBufferViewCtor(value);\n  }\n\n  if (value instanceof ByteBuffer) {\n    return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n  }\n\n  return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n/** @ignore */\n\nexport var toInt8Array = function toInt8Array(input) {\n  return toArrayBufferView(Int8Array, input);\n};\n/** @ignore */\n\nexport var toInt16Array = function toInt16Array(input) {\n  return toArrayBufferView(Int16Array, input);\n};\n/** @ignore */\n\nexport var toInt32Array = function toInt32Array(input) {\n  return toArrayBufferView(Int32Array, input);\n};\n/** @ignore */\n\nexport var toBigInt64Array = function toBigInt64Array(input) {\n  return toArrayBufferView(BigInt64Array, input);\n};\n/** @ignore */\n\nexport var toUint8Array = function toUint8Array(input) {\n  return toArrayBufferView(Uint8Array, input);\n};\n/** @ignore */\n\nexport var toUint16Array = function toUint16Array(input) {\n  return toArrayBufferView(Uint16Array, input);\n};\n/** @ignore */\n\nexport var toUint32Array = function toUint32Array(input) {\n  return toArrayBufferView(Uint32Array, input);\n};\n/** @ignore */\n\nexport var toBigUint64Array = function toBigUint64Array(input) {\n  return toArrayBufferView(BigUint64Array, input);\n};\n/** @ignore */\n\nexport var toFloat32Array = function toFloat32Array(input) {\n  return toArrayBufferView(Float32Array, input);\n};\n/** @ignore */\n\nexport var toFloat64Array = function toFloat64Array(input) {\n  return toArrayBufferView(Float64Array, input);\n};\n/** @ignore */\n\nexport var toUint8ClampedArray = function toUint8ClampedArray(input) {\n  return toArrayBufferView(Uint8ClampedArray, input);\n};\n/** @ignore */\n\nvar pump = function pump(iterator) {\n  iterator.next();\n  return iterator;\n};\n/** @ignore */\n\n\nexport function toArrayBufferViewIterator(ArrayCtor, source) {\n  var wrap, buffers;\n  return _regeneratorRuntime().wrap(function toArrayBufferViewIterator$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          wrap = /*#__PURE__*/_regeneratorRuntime().mark(function wrap(x) {\n            return _regeneratorRuntime().wrap(function wrap$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return x;\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, wrap);\n          });\n          buffers = typeof source === 'string' ? wrap(source) : ArrayBuffer.isView(source) ? wrap(source) : source instanceof ArrayBuffer ? wrap(source) : source instanceof SharedArrayBuf ? wrap(source) : !isIterable(source) ? wrap(source) : source;\n          return _context3.delegateYield(pump( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(it) {\n            var r;\n            return _regeneratorRuntime().wrap(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    r = null;\n\n                  case 1:\n                    _context2.t0 = it;\n                    _context2.next = 4;\n                    return toArrayBufferView(ArrayCtor, r);\n\n                  case 4:\n                    _context2.t1 = _context2.sent;\n                    r = _context2.t0.next.call(_context2.t0, _context2.t1);\n\n                  case 6:\n                    if (!r.done) {\n                      _context2.next = 1;\n                      break;\n                    }\n\n                  case 7:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee);\n          })(buffers[Symbol.iterator]())), \"t0\", 3);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked);\n}\n/** @ignore */\n\nexport var toInt8ArrayIterator = function toInt8ArrayIterator(input) {\n  return toArrayBufferViewIterator(Int8Array, input);\n};\n/** @ignore */\n\nexport var toInt16ArrayIterator = function toInt16ArrayIterator(input) {\n  return toArrayBufferViewIterator(Int16Array, input);\n};\n/** @ignore */\n\nexport var toInt32ArrayIterator = function toInt32ArrayIterator(input) {\n  return toArrayBufferViewIterator(Int32Array, input);\n};\n/** @ignore */\n\nexport var toUint8ArrayIterator = function toUint8ArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint8Array, input);\n};\n/** @ignore */\n\nexport var toUint16ArrayIterator = function toUint16ArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint16Array, input);\n};\n/** @ignore */\n\nexport var toUint32ArrayIterator = function toUint32ArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint32Array, input);\n};\n/** @ignore */\n\nexport var toFloat32ArrayIterator = function toFloat32ArrayIterator(input) {\n  return toArrayBufferViewIterator(Float32Array, input);\n};\n/** @ignore */\n\nexport var toFloat64ArrayIterator = function toFloat64ArrayIterator(input) {\n  return toArrayBufferViewIterator(Float64Array, input);\n};\n/** @ignore */\n\nexport var toUint8ClampedArrayIterator = function toUint8ClampedArrayIterator(input) {\n  return toArrayBufferViewIterator(Uint8ClampedArray, input);\n};\n/** @ignore */\n\nexport function toArrayBufferViewAsyncIterator(_x, _x2) {\n  return _toArrayBufferViewAsyncIterator.apply(this, arguments);\n}\n/** @ignore */\n\nfunction _toArrayBufferViewAsyncIterator() {\n  _toArrayBufferViewAsyncIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(ArrayCtor, source) {\n    var wrap, emit, buffers;\n    return _regeneratorRuntime().wrap(function _callee6$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!isPromise(source)) {\n              _context8.next = 13;\n              break;\n            }\n\n            _context8.t0 = _asyncGeneratorDelegate;\n            _context8.t1 = _asyncIterator;\n            _context8.t2 = toArrayBufferViewAsyncIterator;\n            _context8.t3 = ArrayCtor;\n            _context8.next = 7;\n            return _awaitAsyncGenerator(source);\n\n          case 7:\n            _context8.t4 = _context8.sent;\n            _context8.t5 = (0, _context8.t2)(_context8.t3, _context8.t4);\n            _context8.t6 = (0, _context8.t1)(_context8.t5);\n            _context8.t7 = _awaitAsyncGenerator;\n            return _context8.delegateYield((0, _context8.t0)(_context8.t6, _context8.t7), \"t8\", 12);\n\n          case 12:\n            return _context8.abrupt(\"return\", _context8.t8);\n\n          case 13:\n            wrap = /*#__PURE__*/function () {\n              var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(x) {\n                return _regeneratorRuntime().wrap(function _callee2$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.next = 2;\n                        return _awaitAsyncGenerator(x);\n\n                      case 2:\n                        _context4.next = 4;\n                        return _context4.sent;\n\n                      case 4:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function wrap(_x3) {\n                return _ref.apply(this, arguments);\n              };\n            }();\n\n            emit = /*#__PURE__*/function () {\n              var _ref2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(source) {\n                return _regeneratorRuntime().wrap(function _callee4$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        return _context6.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pump( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(it) {\n                          var r;\n                          return _regeneratorRuntime().wrap(function _callee3$(_context5) {\n                            while (1) {\n                              switch (_context5.prev = _context5.next) {\n                                case 0:\n                                  r = null;\n\n                                case 1:\n                                  _context5.t0 = it;\n                                  _context5.next = 4;\n                                  return r && r.value;\n\n                                case 4:\n                                  _context5.t1 = _context5.sent;\n                                  r = _context5.t0.next.call(_context5.t0, _context5.t1);\n\n                                case 6:\n                                  if (!r.done) {\n                                    _context5.next = 1;\n                                    break;\n                                  }\n\n                                case 7:\n                                case \"end\":\n                                  return _context5.stop();\n                              }\n                            }\n                          }, _callee3);\n                        })(source[Symbol.iterator]()))), _awaitAsyncGenerator), \"t0\", 1);\n\n                      case 1:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n\n              return function emit(_x4) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            buffers = typeof source === 'string' ? wrap(source) // if string, wrap in an AsyncIterableIterator\n            : ArrayBuffer.isView(source) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n            : source instanceof ArrayBuffer ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n            : source instanceof SharedArrayBuf ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n            : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n            : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n            : source; // otherwise if AsyncIterable, use it\n\n            return _context8.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pump(function () {\n              var _ref3 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(it) {\n                var r;\n                return _regeneratorRuntime().wrap(function _callee5$(_context7) {\n                  while (1) {\n                    switch (_context7.prev = _context7.next) {\n                      case 0:\n                        r = null;\n\n                      case 1:\n                        _context7.t0 = _awaitAsyncGenerator;\n                        _context7.t1 = it;\n                        _context7.next = 5;\n                        return toArrayBufferView(ArrayCtor, r);\n\n                      case 5:\n                        _context7.t2 = _context7.sent;\n                        _context7.t3 = _context7.t1.next.call(_context7.t1, _context7.t2);\n                        _context7.next = 9;\n                        return (0, _context7.t0)(_context7.t3);\n\n                      case 9:\n                        r = _context7.sent;\n\n                      case 10:\n                        if (!r.done) {\n                          _context7.next = 1;\n                          break;\n                        }\n\n                      case 11:\n                      case \"end\":\n                        return _context7.stop();\n                    }\n                  }\n                }, _callee5);\n              }));\n\n              return function (_x5) {\n                return _ref3.apply(this, arguments);\n              };\n            }()(buffers[Symbol.asyncIterator]()))), _awaitAsyncGenerator), \"t9\", 17);\n\n          case 17:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _toArrayBufferViewAsyncIterator.apply(this, arguments);\n}\n\nexport var toInt8ArrayAsyncIterator = function toInt8ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Int8Array, input);\n};\n/** @ignore */\n\nexport var toInt16ArrayAsyncIterator = function toInt16ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Int16Array, input);\n};\n/** @ignore */\n\nexport var toInt32ArrayAsyncIterator = function toInt32ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Int32Array, input);\n};\n/** @ignore */\n\nexport var toUint8ArrayAsyncIterator = function toUint8ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint8Array, input);\n};\n/** @ignore */\n\nexport var toUint16ArrayAsyncIterator = function toUint16ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint16Array, input);\n};\n/** @ignore */\n\nexport var toUint32ArrayAsyncIterator = function toUint32ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint32Array, input);\n};\n/** @ignore */\n\nexport var toFloat32ArrayAsyncIterator = function toFloat32ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Float32Array, input);\n};\n/** @ignore */\n\nexport var toFloat64ArrayAsyncIterator = function toFloat64ArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Float64Array, input);\n};\n/** @ignore */\n\nexport var toUint8ClampedArrayAsyncIterator = function toUint8ClampedArrayAsyncIterator(input) {\n  return toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n};\n/** @ignore */\n\nexport function rebaseValueOffsets(offset, length, valueOffsets) {\n  // If we have a non-zero offset, create a new offsets array with the values\n  // shifted by the start offset, such that the new start offset is 0\n  if (offset !== 0) {\n    valueOffsets = valueOffsets.slice(0, length + 1);\n\n    for (var i = -1; ++i <= length;) {\n      valueOffsets[i] += offset;\n    }\n  }\n\n  return valueOffsets;\n}\n/** @ignore */\n\nexport function compareArrayLike(a, b) {\n  var i = 0,\n      n = a.length;\n\n  if (n !== b.length) {\n    return false;\n  }\n\n  if (n > 0) {\n    do {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    } while (++i < n);\n  }\n\n  return true;\n}","map":{"version":3,"sources":["util/buffer.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"module"}