{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\nimport * as d3 from 'd3';\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[\"top\"] = \"top\";\n  Orientation[\"bottom\"] = \"bottom\";\n  Orientation[\"right\"] = \"right\";\n  Orientation[\"left\"] = \"left\";\n})(Orientation || (Orientation = {}));\n\nfunction create_container(dimensions) {\n  if (d3.select(\"#idendro\")) {\n    d3.select(\"#idendro\").remove();\n  } // append svg element to the body of the page\n  // set dimensions and position of the svg element\n\n\n  let svg = d3.select(\"body\").append(\"svg\").attr(\"id\", \"idendro\").attr(\"width\", dimensions.width).attr(\"height\", dimensions.height);\n  let plot = svg.append(\"g\").attr(\"transform\", \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\").attr(\"id\", \"idendro-container\");\n  return plot;\n}\n\nfunction create_axis(plot, dimensions, dendrogram) {\n  let width_limits,\n      height_limits,\n      height_range,\n      width_range = [0, 0];\n  let x_axis_func, y_axis_func;\n  let x_axis_transform = dimensions.innerHeight;\n  let y_axis_transform = 0; //handle orientation impact on scale ranges & positioning\n\n  if (dimensions.orientation === Orientation.top || dimensions.orientation === Orientation.bottom) {\n    height_limits = dendrogram.y_limits;\n    width_limits = dendrogram.x_limits;\n    width_range = [0, dimensions.innerWidth];\n    y_axis_func = d3.axisLeft;\n\n    if (dimensions.orientation === Orientation.top) {\n      height_range = [dimensions.innerHeight, 0];\n      x_axis_func = d3.axisBottom;\n    } else {\n      height_range = [0, dimensions.innerHeight];\n      x_axis_func = d3.axisTop;\n      x_axis_transform = 0;\n    }\n  } else {\n    x_axis_func = d3.axisBottom;\n    height_limits = dendrogram.x_limits;\n    width_limits = dendrogram.y_limits;\n    height_range = [dimensions.innerHeight, 0];\n\n    if (dimensions.orientation === Orientation.left) {\n      width_range = [0, dimensions.innerWidth];\n      y_axis_func = d3.axisLeft;\n    } else {\n      width_range = [dimensions.innerWidth, 0];\n      y_axis_func = d3.axisRight;\n      y_axis_transform = dimensions.innerWidth;\n    }\n  } //create X-axis\n\n\n  var xScale = d3.scaleLinear();\n  xScale.domain(width_limits).range(width_range);\n  var xAxis = x_axis_func(xScale);\n  xAxis.tickValues([3000, 5000, 9000]); //create y-axis\n\n  var yScale = d3.scaleLinear();\n  yScale.domain(height_limits).range(height_range);\n  var yAxis = y_axis_func(yScale); //add X-axis to plot\n\n  let xg = plot.append(\"g\").attr(\"id\", \"x-axis\").attr(\"transform\", \"translate(0,\" + x_axis_transform + \")\").call(xAxis); //add Y-axis to plot\n\n  let yg = plot.append(\"g\").attr(\"id\", \"y-axis\").attr(\"transform\", \"translate(\" + y_axis_transform + \",0)\").call(yAxis);\n}\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\n\n\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail;\n  var dendrogram = data.args['data'];\n  let margin = {\n    top: 20,\n    right: 10,\n    bottom: 20,\n    left: 10\n  };\n  let dimensions = {\n    height: data.args['height'],\n    width: data.args['width'],\n    margin: margin,\n    innerHeight: 0,\n    innerWidth: 0,\n    orientation: data.args['orientation']\n  };\n\n  if (dimensions.orientation === Orientation.right) {\n    dimensions.margin.right = 50;\n  } else {\n    dimensions.margin.left = 50;\n  }\n\n  dimensions.innerHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom;\n  dimensions.innerWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  let plot = create_container(dimensions);\n  create_axis(plot, dimensions, dendrogram);\n  Streamlit.setFrameHeight();\n} // Attach our `onRender` handler to Streamlit's render event.\n\n\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","d3","Orientation","create_container","dimensions","select","remove","svg","append","attr","width","height","plot","margin","left","top","create_axis","dendrogram","width_limits","height_limits","height_range","width_range","x_axis_func","y_axis_func","x_axis_transform","innerHeight","y_axis_transform","orientation","bottom","y_limits","x_limits","innerWidth","axisLeft","axisBottom","axisTop","axisRight","xScale","scaleLinear","domain","range","xAxis","tickValues","yScale","yAxis","xg","call","yg","onRender","event","data","detail","args","right","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/home/aurimas/coding/idendro/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport * as d3 from 'd3'\n\ninterface AxisLabel {\n    x: number\n    label: string\n    labelsize: number\n}\n\ninterface ClusterLink {\n    x: number[]\n    y: number[]\n    fillcolor: string\n    size: number\n}\n\ninterface ClusterNode {\n    x: number\n    y: number\n    edgecolor: string\n    fillcolor: string\n    label: string\n    hovertext: Object[] | string\n    size: number\n    labelsize: number\n    labelcolor: string\n\n}\n\ninterface Dendrogram {\n    axis_labels: AxisLabel[]\n    links: ClusterLink[]\n    nodes: ClusterNode[]\n    x_limits: [number, number]\n    y_limits: [number, number]\n}\n\ninterface Dimensions {\n    margin: Margin\n    height: number\n    width: number\n    innerHeight: number\n    innerWidth: number,\n    orientation: Orientation\n}\n\nenum Orientation {\n    top = \"top\",\n    bottom = \"bottom\",\n    right = \"right\",\n    left = \"left\"\n}\n\ninterface Margin {\n    top: number\n    right: number\n    bottom: number\n    left: number\n}\n\ninterface plot extends d3.Selection<SVGGElement, unknown, HTMLElement, any> {\n    \n}\n\nfunction create_container(dimensions: Dimensions): plot {\n    \n    \n    if (d3.select(\"#idendro\")) {\n        d3.select(\"#idendro\").remove()\n    }\n    // append svg element to the body of the page\n    // set dimensions and position of the svg element\n    let svg = d3\n        .select(\"body\")\n        .append(\"svg\")\n        .attr(\"id\", \"idendro\")\n        .attr(\"width\", dimensions.width)\n        .attr(\"height\", dimensions.height)\n\n    let plot = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + dimensions.margin.left + \",\" + dimensions.margin.top + \")\")\n        .attr(\"id\", \"idendro-container\");\n\n    return plot\n}\n\nfunction create_axis(plot: plot, dimensions: Dimensions, dendrogram: Dendrogram) {\n\n    let width_limits, height_limits, height_range, width_range = [0, 0]\n    let x_axis_func, y_axis_func : CallableFunction\n    let x_axis_transform =  dimensions.innerHeight\n    let y_axis_transform = 0\n\n    //handle orientation impact on scale ranges & positioning\n    if (dimensions.orientation === Orientation.top || dimensions.orientation === Orientation.bottom) {\n        height_limits = dendrogram.y_limits\n        width_limits = dendrogram.x_limits\n        width_range = [0, dimensions.innerWidth]\n        y_axis_func = d3.axisLeft\n        if (dimensions.orientation === Orientation.top) {\n            height_range = [dimensions.innerHeight, 0]\n            x_axis_func = d3.axisBottom\n        } else {\n            height_range = [0, dimensions.innerHeight]\n            x_axis_func = d3.axisTop\n            x_axis_transform = 0\n        }        \n    } else {\n        x_axis_func = d3.axisBottom\n        height_limits = dendrogram.x_limits\n        width_limits = dendrogram.y_limits                \n        height_range = [dimensions.innerHeight, 0]\n        if (dimensions.orientation === Orientation.left) {\n            width_range = [0, dimensions.innerWidth]\n            y_axis_func = d3.axisLeft\n        } else {\n            width_range = [dimensions.innerWidth, 0]\n            y_axis_func = d3.axisRight\n            y_axis_transform = dimensions.innerWidth\n        }\n    }\n    \n    //create X-axis\n    var xScale = d3.scaleLinear()        \n    xScale.domain(width_limits).range(width_range)\n    var xAxis = x_axis_func(xScale)\n    xAxis.tickValues([3000,5000,9000]);\n    \n    //create y-axis\n    var yScale = d3.scaleLinear()\n    yScale.domain(height_limits).range(height_range)\n    var yAxis = y_axis_func(yScale)\n\n\n    //add X-axis to plot\n    let xg = plot.append(\"g\")\n        .attr(\"id\", \"x-axis\")            \n        .attr(\"transform\", \"translate(0,\" + x_axis_transform + \")\")\n        .call(xAxis)\n\n    //add Y-axis to plot\n    let yg = plot.append(\"g\")\n    .attr(\"id\", \"y-axis\")            \n    .attr(\"transform\", \"translate(\" + y_axis_transform + \",0)\")\n    .call(yAxis)\n}\n\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n    // Get the RenderData from the event\n    const data = (event as CustomEvent<RenderData>).detail\n\n    var dendrogram: Dendrogram = data.args['data']\n    let margin: Margin = { top: 20, right: 10, bottom: 20, left: 10 }    \n    let dimensions: Dimensions = {\n        height:  data.args['height'],\n        width: data.args['width'],\n        margin: margin,\n        innerHeight: 0,\n        innerWidth: 0,\n        orientation: data.args['orientation']\n    }    \n    if (dimensions.orientation === Orientation.right) {\n        dimensions.margin.right = 50\n    } else {\n        dimensions.margin.left = 50\n    }\n\n    dimensions.innerHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom\n    dimensions.innerWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right    \n    \n    let plot = create_container(dimensions)\n    create_axis(plot, dimensions, dendrogram)\n\n    Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}