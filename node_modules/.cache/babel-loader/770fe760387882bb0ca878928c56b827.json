{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { ReadableInterop } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\nexport class RecordBatchWriter extends ReadableInterop {\n  constructor(options) {\n    super();\n    this._position = 0;\n    this._started = false; // @ts-ignore\n\n    this._sink = new AsyncByteQueue();\n    this._schema = null;\n    this._dictionaryBlocks = [];\n    this._recordBatchBlocks = [];\n    this._dictionaryDeltaOffsets = new Map();\n    isObject(options) || (options = {\n      autoDestroy: true,\n      writeLegacyIpcFormat: false\n    });\n    this._autoDestroy = typeof options.autoDestroy === 'boolean' ? options.autoDestroy : true;\n    this._writeLegacyIpcFormat = typeof options.writeLegacyIpcFormat === 'boolean' ? options.writeLegacyIpcFormat : false;\n  }\n  /** @nocollapse */\n  // @ts-ignore\n\n\n  static throughNode(options) {\n    throw new Error(`\"throughNode\" not available in this environment`);\n  }\n  /** @nocollapse */\n\n\n  static throughDOM( // @ts-ignore\n  writableStrategy, // @ts-ignore\n  readableStrategy) {\n    throw new Error(`\"throughDOM\" not available in this environment`);\n  }\n\n  toString() {\n    let sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this._sink.toString(sync);\n  }\n\n  toUint8Array() {\n    let sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this._sink.toUint8Array(sync);\n  }\n\n  writeAll(input) {\n    if (isPromise(input)) {\n      return input.then(x => this.writeAll(x));\n    } else if (isAsyncIterable(input)) {\n      return writeAllAsync(this, input);\n    }\n\n    return writeAll(this, input);\n  }\n\n  get closed() {\n    return this._sink.closed;\n  }\n\n  [Symbol.asyncIterator]() {\n    return this._sink[Symbol.asyncIterator]();\n  }\n\n  toDOMStream(options) {\n    return this._sink.toDOMStream(options);\n  }\n\n  toNodeStream(options) {\n    return this._sink.toNodeStream(options);\n  }\n\n  close() {\n    return this.reset()._sink.close();\n  }\n\n  abort(reason) {\n    return this.reset()._sink.abort(reason);\n  }\n\n  finish() {\n    this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n    return this;\n  }\n\n  reset() {\n    let sink = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._sink;\n    let schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (sink === this._sink || sink instanceof AsyncByteQueue) {\n      this._sink = sink;\n    } else {\n      this._sink = new AsyncByteQueue();\n\n      if (sink && isWritableDOMStream(sink)) {\n        this.toDOMStream({\n          type: 'bytes'\n        }).pipeTo(sink);\n      } else if (sink && isWritableNodeStream(sink)) {\n        this.toNodeStream({\n          objectMode: false\n        }).pipe(sink);\n      }\n    }\n\n    if (this._started && this._schema) {\n      this._writeFooter(this._schema);\n    }\n\n    this._started = false;\n    this._dictionaryBlocks = [];\n    this._recordBatchBlocks = [];\n    this._dictionaryDeltaOffsets = new Map();\n\n    if (!schema || !schema.compareTo(this._schema)) {\n      if (schema === null) {\n        this._position = 0;\n        this._schema = null;\n      } else {\n        this._started = true;\n        this._schema = schema;\n\n        this._writeSchema(schema);\n      }\n    }\n\n    return this;\n  }\n\n  write(payload) {\n    let schema = null;\n\n    if (!this._sink) {\n      throw new Error(`RecordBatchWriter is closed`);\n    } else if (payload === null || payload === undefined) {\n      return this.finish() && undefined;\n    } else if (payload instanceof Table && !(schema = payload.schema)) {\n      return this.finish() && undefined;\n    } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n      return this.finish() && undefined;\n    }\n\n    if (schema && !schema.compareTo(this._schema)) {\n      if (this._started && this._autoDestroy) {\n        return this.close();\n      }\n\n      this.reset(this._sink, schema);\n    }\n\n    if (payload instanceof RecordBatch) {\n      if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n        this._writeRecordBatch(payload);\n      }\n    } else if (payload instanceof Table) {\n      this.writeAll(payload.chunks);\n    } else if (isIterable(payload)) {\n      this.writeAll(payload);\n    }\n  }\n\n  _writeMessage(message) {\n    let alignment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n    const a = alignment - 1;\n    const buffer = Message.encode(message);\n    const flatbufferSize = buffer.byteLength;\n    const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n    const alignedSize = flatbufferSize + prefixSize + a & ~a;\n    const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n    if (message.headerType === MessageHeader.RecordBatch) {\n      this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n    } else if (message.headerType === MessageHeader.DictionaryBatch) {\n      this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n    } // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n\n\n    if (!this._writeLegacyIpcFormat) {\n      this._write(Int32Array.of(-1));\n    } // Write the flatbuffer size prefix including padding\n\n\n    this._write(Int32Array.of(alignedSize - prefixSize)); // Write the flatbuffer\n\n\n    if (flatbufferSize > 0) {\n      this._write(buffer);\n    } // Write any padding\n\n\n    return this._writePadding(nPaddingBytes);\n  }\n\n  _write(chunk) {\n    if (this._started) {\n      const buffer = toUint8Array(chunk);\n\n      if (buffer && buffer.byteLength > 0) {\n        this._sink.write(buffer);\n\n        this._position += buffer.byteLength;\n      }\n    }\n\n    return this;\n  }\n\n  _writeSchema(schema) {\n    return this._writeMessage(Message.from(schema));\n  } // @ts-ignore\n\n\n  _writeFooter(schema) {\n    // eos bytes\n    return this._writeLegacyIpcFormat ? this._write(Int32Array.of(0)) : this._write(Int32Array.of(-1, 0));\n  }\n\n  _writeMagic() {\n    return this._write(MAGIC);\n  }\n\n  _writePadding(nBytes) {\n    return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n  }\n\n  _writeRecordBatch(batch) {\n    const {\n      byteLength,\n      nodes,\n      bufferRegions,\n      buffers\n    } = VectorAssembler.assemble(batch);\n    const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n    const message = Message.from(recordBatch, byteLength);\n    return this._writeDictionaries(batch)._writeMessage(message)._writeBodyBuffers(buffers);\n  }\n\n  _writeDictionaryBatch(dictionary, id) {\n    let isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n\n    const {\n      byteLength,\n      nodes,\n      bufferRegions,\n      buffers\n    } = VectorAssembler.assemble(dictionary);\n    const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n    const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n    const message = Message.from(dictionaryBatch, byteLength);\n    return this._writeMessage(message)._writeBodyBuffers(buffers);\n  }\n\n  _writeBodyBuffers(buffers) {\n    let buffer;\n    let size, padding;\n\n    for (let i = -1, n = buffers.length; ++i < n;) {\n      if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n        this._write(buffer);\n\n        if ((padding = (size + 7 & ~7) - size) > 0) {\n          this._writePadding(padding);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  _writeDictionaries(batch) {\n    for (let [id, dictionary] of batch.dictionaries) {\n      let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n\n      if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n        const chunks = 'chunks' in dictionary ? dictionary.chunks : [dictionary];\n\n        for (const chunk of chunks) {\n          this._writeDictionaryBatch(chunk, id, offset > 0);\n\n          offset += chunk.length;\n        }\n      }\n    }\n\n    return this;\n  }\n\n}\n/** @ignore */\n\nexport class RecordBatchStreamWriter extends RecordBatchWriter {\n  /** @nocollapse */\n  static writeAll(input, options) {\n    const writer = new RecordBatchStreamWriter(options);\n\n    if (isPromise(input)) {\n      return input.then(x => writer.writeAll(x));\n    } else if (isAsyncIterable(input)) {\n      return writeAllAsync(writer, input);\n    }\n\n    return writeAll(writer, input);\n  }\n\n}\n/** @ignore */\n\nexport class RecordBatchFileWriter extends RecordBatchWriter {\n  constructor() {\n    super();\n    this._autoDestroy = true;\n  }\n  /** @nocollapse */\n\n\n  static writeAll(input) {\n    const writer = new RecordBatchFileWriter();\n\n    if (isPromise(input)) {\n      return input.then(x => writer.writeAll(x));\n    } else if (isAsyncIterable(input)) {\n      return writeAllAsync(writer, input);\n    }\n\n    return writeAll(writer, input);\n  } // @ts-ignore\n\n\n  _writeSchema(schema) {\n    return this._writeMagic()._writePadding(2);\n  }\n\n  _writeFooter(schema) {\n    const buffer = Footer.encode(new Footer(schema, MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));\n    return super._writeFooter(schema) // EOS bytes for sequential readers\n    ._write(buffer) // Write the flatbuffer\n    ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n    ._writeMagic(); // then the magic suffix\n  }\n\n}\n/** @ignore */\n\nexport class RecordBatchJSONWriter extends RecordBatchWriter {\n  constructor() {\n    super();\n    this._autoDestroy = true;\n    this._recordBatches = [];\n    this._dictionaries = [];\n  }\n  /** @nocollapse */\n\n\n  static writeAll(input) {\n    return new RecordBatchJSONWriter().writeAll(input);\n  }\n\n  _writeMessage() {\n    return this;\n  } // @ts-ignore\n\n\n  _writeFooter(schema) {\n    return this;\n  }\n\n  _writeSchema(schema) {\n    return this._write(`{\\n  \"schema\": ${JSON.stringify({\n      fields: schema.fields.map(fieldToJSON)\n    }, null, 2)}`);\n  }\n\n  _writeDictionaries(batch) {\n    if (batch.dictionaries.size > 0) {\n      this._dictionaries.push(batch);\n    }\n\n    return this;\n  }\n\n  _writeDictionaryBatch(dictionary, id) {\n    let isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n\n    this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n\n    this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n\n    this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n\n    return this;\n  }\n\n  _writeRecordBatch(batch) {\n    this._writeDictionaries(batch);\n\n    this._recordBatches.push(batch);\n\n    return this;\n  }\n\n  close() {\n    if (this._dictionaries.length > 0) {\n      this._write(`,\\n  \"dictionaries\": [\\n`);\n\n      for (const batch of this._dictionaries) {\n        super._writeDictionaries(batch);\n      }\n\n      this._write(`\\n  ]`);\n    }\n\n    if (this._recordBatches.length > 0) {\n      for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n        this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n\n        this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n\n        this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n      }\n\n      this._write(`\\n  ]`);\n    }\n\n    if (this._schema) {\n      this._write(`\\n}`);\n    }\n\n    this._dictionaries = [];\n    this._recordBatches = [];\n    return super.close();\n  }\n\n}\n/** @ignore */\n\nfunction writeAll(writer, input) {\n  let chunks = input;\n\n  if (input instanceof Table) {\n    chunks = input.chunks;\n    writer.reset(undefined, input.schema);\n  }\n\n  for (const batch of chunks) {\n    writer.write(batch);\n  }\n\n  return writer.finish();\n}\n/** @ignore */\n\n\nasync function writeAllAsync(writer, batches) {\n  for await (const batch of batches) {\n    writer.write(batch);\n  }\n\n  return writer.finish();\n}\n/** @ignore */\n\n\nfunction fieldToJSON(_ref) {\n  let {\n    name,\n    type,\n    nullable\n  } = _ref;\n  const assembler = new JSONTypeAssembler();\n  return {\n    'name': name,\n    'nullable': nullable,\n    'type': assembler.visit(type),\n    'children': (type.children || []).map(fieldToJSON),\n    'dictionary': !DataType.isDictionary(type) ? undefined : {\n      'id': type.id,\n      'isOrdered': type.isOrdered,\n      'indexType': assembler.visit(type.indices)\n    }\n  };\n}\n/** @ignore */\n\n\nfunction dictionaryBatchToJSON(dictionary, id) {\n  let isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n  const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n  return JSON.stringify({\n    'id': id,\n    'isDelta': isDelta,\n    'data': {\n      'count': dictionary.length,\n      'columns': columns\n    }\n  }, null, 2);\n}\n/** @ignore */\n\n\nfunction recordBatchToJSON(records) {\n  return JSON.stringify({\n    'count': records.length,\n    'columns': JSONVectorAssembler.assemble(records)\n  }, null, 2);\n}","map":{"version":3,"sources":["ipc/writer.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n"]},"metadata":{},"sourceType":"module"}