{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { toUint8Array } from '../util/buffer';\n/** @ignore */\n\nexport class RandomAccessFile extends ByteStream {\n  constructor(buffer, byteLength) {\n    super();\n    this.position = 0;\n    this.buffer = toUint8Array(buffer);\n    this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n  }\n\n  readInt32(position) {\n    const {\n      buffer,\n      byteOffset\n    } = this.readAt(position, 4);\n    return new DataView(buffer, byteOffset).getInt32(0, true);\n  }\n\n  seek(position) {\n    this.position = Math.min(position, this.size);\n    return position < this.size;\n  }\n\n  read(nBytes) {\n    const {\n      buffer,\n      size,\n      position\n    } = this;\n\n    if (buffer && position < size) {\n      if (typeof nBytes !== 'number') {\n        nBytes = Infinity;\n      }\n\n      this.position = Math.min(size, position + Math.min(size - position, nBytes));\n      return buffer.subarray(position, this.position);\n    }\n\n    return null;\n  }\n\n  readAt(position, nBytes) {\n    const buf = this.buffer;\n    const end = Math.min(this.size, position + nBytes);\n    return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n  }\n\n  close() {\n    this.buffer && (this.buffer = null);\n  }\n\n  throw(value) {\n    this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n\n  return(value) {\n    this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n\n}\n/** @ignore */\n\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n  constructor(file, byteLength) {\n    super();\n    this.position = 0;\n    this._handle = file;\n\n    if (typeof byteLength === 'number') {\n      this.size = byteLength;\n    } else {\n      this._pending = (async () => {\n        this.size = (await file.stat()).size;\n        delete this._pending;\n      })();\n    }\n  }\n\n  async readInt32(position) {\n    const {\n      buffer,\n      byteOffset\n    } = await this.readAt(position, 4);\n    return new DataView(buffer, byteOffset).getInt32(0, true);\n  }\n\n  async seek(position) {\n    this._pending && (await this._pending);\n    this.position = Math.min(position, this.size);\n    return position < this.size;\n  }\n\n  async read(nBytes) {\n    this._pending && (await this._pending);\n    const {\n      _handle: file,\n      size,\n      position\n    } = this;\n\n    if (file && position < size) {\n      if (typeof nBytes !== 'number') {\n        nBytes = Infinity;\n      }\n\n      let pos = position,\n          offset = 0,\n          bytesRead = 0;\n      let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n      let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n\n      while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n        ({\n          bytesRead\n        } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n      }\n\n      return buffer;\n    }\n\n    return null;\n  }\n\n  async readAt(position, nBytes) {\n    this._pending && (await this._pending);\n    const {\n      _handle: file,\n      size\n    } = this;\n\n    if (file && position + nBytes < size) {\n      const end = Math.min(size, position + nBytes);\n      const buffer = new Uint8Array(end - position);\n      return (await file.read(buffer, 0, nBytes, position)).buffer;\n    }\n\n    return new Uint8Array(nBytes);\n  }\n\n  async close() {\n    const f = this._handle;\n    this._handle = null;\n    f && (await f.close());\n  }\n\n  async throw(value) {\n    await this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n\n  async return(value) {\n    await this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n\n}","map":{"version":3,"sources":["io/file.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n"]},"metadata":{},"sourceType":"module"}