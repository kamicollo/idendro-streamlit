{"ast":null,"code":"import { Streamlit } from \"streamlit-component-lib\";\nimport * as d3 from 'd3';\n\nfunction create_container() {\n  let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 960;\n  let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n  let margin = {\n    top: 20,\n    right: 10,\n    bottom: 20,\n    left: 10\n  },\n      outerWidth = width,\n      outerHeight = height,\n      innerWidth = outerWidth - margin.left - margin.right,\n      innerHeight = outerHeight - margin.top - margin.bottom; // append svg element to the body of the page\n  // set dimensions and position of the svg element\n\n  let svg = d3.select(\"body\").append(\"svg\").attr(\"id\", \"idendro\").attr(\"width\", outerWidth).attr(\"height\", outerHeight);\n  let plot = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"id\", \"idendro-container\");\n  return {\n    'svg': svg,\n    'plot': plot,\n    'innerWidth': innerWidth,\n    'innerHeight': innerHeight\n  };\n}\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\n\n\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail;\n  let dendrogram = data.args['data'];\n  console.log(dendrogram);\n  Streamlit.setFrameHeight();\n} // Attach our `onRender` handler to Streamlit's render event.\n\n\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"names":["Streamlit","d3","create_container","width","height","margin","top","right","bottom","left","outerWidth","outerHeight","innerWidth","innerHeight","svg","select","append","attr","plot","onRender","event","data","detail","dendrogram","args","console","log","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"sources":["/home/aurimas/coding/idendro/frontend/src/index.tsx"],"sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport * as d3 from 'd3'\n\ninterface AxisLabel {\n    x: number\n    label: string\n    labelsize: number\n}\n\ninterface ClusterLink {\n    x: number[]\n    y: number[]\n    fillcolor: string\n    size: number\n}\n\ninterface ClusterNode {\n    x: number\n    y: number\n    edgecolor: string\n    fillcolor: string\n    label: string\n    hovertext: Object[] | string \n    size: number\n    labelsize: number\n    labelcolor: string\n\n}\n\ninterface Dendrogram {\n    axis_labels: AxisLabel[]\n    links: ClusterLink[]\n    nodes: ClusterNode[]\n    bar: number \n}\n\nfunction create_container(width=960, height=500) {\n    let margin = {top: 20, right: 10, bottom: 20, left: 10},\n    outerWidth = width,\n    outerHeight = height,\n    innerWidth = outerWidth - margin.left - margin.right,\n    innerHeight = outerHeight - margin.top - margin.bottom\n\n    // append svg element to the body of the page\n    // set dimensions and position of the svg element\n    let svg = d3\n        .select(\"body\")\n        .append(\"svg\")\n        .attr(\"id\", \"idendro\")\n        .attr(\"width\", outerWidth)\n        .attr(\"height\", outerHeight)\n\n    let plot = svg.append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n        .attr(\"id\", \"idendro-container\");\n\n    return {'svg': svg, 'plot': plot, 'innerWidth': innerWidth, 'innerHeight': innerHeight}\n}\n\n/* // Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n} */\n\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  let dendrogram: Dendrogram = data.args['data']\n  console.log(dendrogram)\n\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"mappings":"AAAA,SAASA,SAAT,QAAsC,yBAAtC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAmCA,SAASC,gBAAT,GAAiD;EAAA,IAAvBC,KAAuB,uEAAjB,GAAiB;EAAA,IAAZC,MAAY,uEAAL,GAAK;EAC7C,IAAIC,MAAM,GAAG;IAACC,GAAG,EAAE,EAAN;IAAUC,KAAK,EAAE,EAAjB;IAAqBC,MAAM,EAAE,EAA7B;IAAiCC,IAAI,EAAE;EAAvC,CAAb;EAAA,IACAC,UAAU,GAAGP,KADb;EAAA,IAEAQ,WAAW,GAAGP,MAFd;EAAA,IAGAQ,UAAU,GAAGF,UAAU,GAAGL,MAAM,CAACI,IAApB,GAA2BJ,MAAM,CAACE,KAH/C;EAAA,IAIAM,WAAW,GAAGF,WAAW,GAAGN,MAAM,CAACC,GAArB,GAA2BD,MAAM,CAACG,MAJhD,CAD6C,CAO7C;EACA;;EACA,IAAIM,GAAG,GAAGb,EAAE,CACPc,MADK,CACE,MADF,EAELC,MAFK,CAEE,KAFF,EAGLC,IAHK,CAGA,IAHA,EAGM,SAHN,EAILA,IAJK,CAIA,OAJA,EAISP,UAJT,EAKLO,IALK,CAKA,QALA,EAKUN,WALV,CAAV;EAOA,IAAIO,IAAI,GAAGJ,GAAG,CAACE,MAAJ,CAAW,GAAX,EACNC,IADM,CACD,WADC,EACY,eAAeZ,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GAD5D,EAENW,IAFM,CAED,IAFC,EAEK,mBAFL,CAAX;EAIA,OAAO;IAAC,OAAOH,GAAR;IAAa,QAAQI,IAArB;IAA2B,cAAcN,UAAzC;IAAqD,eAAeC;EAApE,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;;AACA,SAASM,QAAT,CAAkBC,KAAlB,EAAsC;EACpC;EACA,MAAMC,IAAI,GAAID,KAAD,CAAmCE,MAAhD;EAEA,IAAIC,UAAsB,GAAGF,IAAI,CAACG,IAAL,CAAU,MAAV,CAA7B;EACAC,OAAO,CAACC,GAAR,CAAYH,UAAZ;EAEAvB,SAAS,CAAC2B,cAAV;AACD,C,CAED;;;AACA3B,SAAS,CAAC4B,MAAV,CAAiBC,gBAAjB,CAAkC7B,SAAS,CAAC8B,YAA5C,EAA0DX,QAA1D,E,CAEA;AACA;;AACAnB,SAAS,CAAC+B,iBAAV,G,CAEA;AACA;;AACA/B,SAAS,CAAC2B,cAAV"},"metadata":{},"sourceType":"module"}