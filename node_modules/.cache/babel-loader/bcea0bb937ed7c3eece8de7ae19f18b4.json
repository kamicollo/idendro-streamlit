{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType } from '../type';\n\nTable.prototype.countBy = function (name) {\n  return new DataFrame(this.chunks).countBy(name);\n};\n\nTable.prototype.scan = function (next, bind) {\n  return new DataFrame(this.chunks).scan(next, bind);\n};\n\nTable.prototype.scanReverse = function (next, bind) {\n  return new DataFrame(this.chunks).scanReverse(next, bind);\n};\n\nTable.prototype.filter = function (predicate) {\n  return new DataFrame(this.chunks).filter(predicate);\n};\n\nexport class DataFrame extends Table {\n  filter(predicate) {\n    return new FilteredDataFrame(this.chunks, predicate);\n  }\n\n  scan(next, bind) {\n    const batches = this.chunks,\n          numBatches = batches.length;\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      if (bind) {\n        bind(batch);\n      } // yield all indices\n\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        next(index, batch);\n      }\n    }\n  }\n\n  scanReverse(next, bind) {\n    const batches = this.chunks,\n          numBatches = batches.length;\n\n    for (let batchIndex = numBatches; --batchIndex >= 0;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      if (bind) {\n        bind(batch);\n      } // yield all indices\n\n\n      for (let index = batch.length; --index >= 0;) {\n        next(index, batch);\n      }\n    }\n  }\n\n  countBy(name) {\n    const batches = this.chunks,\n          numBatches = batches.length;\n    const count_by = typeof name === 'string' ? new Col(name) : name; // Assume that all dictionary batches are deltas, which means that the\n    // last record batch has the most complete dictionary\n\n    count_by.bind(batches[numBatches - 1]);\n    const vector = count_by.vector;\n\n    if (!DataType.isDictionary(vector.type)) {\n      throw new Error('countBy currently only supports dictionary-encoded columns');\n    }\n\n    const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n    const CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n    const counts = new CountsArrayType(vector.dictionary.length);\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex]; // rebind the countBy Col\n\n      count_by.bind(batch);\n      const keys = count_by.vector.indices; // yield all indices\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        let key = keys.get(index);\n\n        if (key !== null) {\n          counts[key]++;\n        }\n      }\n    }\n\n    return new CountByResult(vector.dictionary, IntVector.from(counts));\n  }\n\n}\n/** @ignore */\n\nexport class CountByResult extends Table {\n  constructor(values, counts) {\n    const schema = new Schema([new Field('values', values.type), new Field('counts', counts.type)]);\n    super(new RecordBatch(schema, counts.length, [values, counts]));\n  }\n\n  toJSON() {\n    const values = this.getColumnAt(0);\n    const counts = this.getColumnAt(1);\n    const result = {};\n\n    for (let i = -1; ++i < this.length;) {\n      result[values.get(i)] = counts.get(i);\n    }\n\n    return result;\n  }\n\n}\n/** @ignore */\n\nexport class FilteredDataFrame extends DataFrame {\n  constructor(batches, predicate) {\n    super(batches);\n    this._predicate = predicate;\n  }\n\n  scan(next, bind) {\n    // inlined version of this:\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) next(idx, columns);\n    // });\n    const batches = this._chunks;\n    const numBatches = batches.length;\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      const predicate = this._predicate.bind(batch);\n\n      let isBound = false; // yield all indices\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          // bind batches lazily - if predicate doesn't match anything\n          // in the batch we don't need to call bind on the batch\n          if (bind && !isBound) {\n            bind(batch);\n            isBound = true;\n          }\n\n          next(index, batch);\n        }\n      }\n    }\n  }\n\n  scanReverse(next, bind) {\n    const batches = this._chunks;\n    const numBatches = batches.length;\n\n    for (let batchIndex = numBatches; --batchIndex >= 0;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      const predicate = this._predicate.bind(batch);\n\n      let isBound = false; // yield all indices\n\n      for (let index = batch.length; --index >= 0;) {\n        if (predicate(index, batch)) {\n          // bind batches lazily - if predicate doesn't match anything\n          // in the batch we don't need to call bind on the batch\n          if (bind && !isBound) {\n            bind(batch);\n            isBound = true;\n          }\n\n          next(index, batch);\n        }\n      }\n    }\n  }\n\n  count() {\n    // inlined version of this:\n    // let sum = 0;\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) ++sum;\n    // });\n    // return sum;\n    let sum = 0;\n    const batches = this._chunks;\n    const numBatches = batches.length;\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      const predicate = this._predicate.bind(batch); // yield all indices\n\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          ++sum;\n        }\n      }\n    }\n\n    return sum;\n  }\n\n  *[Symbol.iterator]() {\n    // inlined version of this:\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) next(idx, columns);\n    // });\n    const batches = this._chunks;\n    const numBatches = batches.length;\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex]; // TODO: bind batches lazily\n      // If predicate doesn't match anything in the batch we don't need\n      // to bind the callback\n\n      const predicate = this._predicate.bind(batch); // yield all indices\n\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          yield batch.get(index);\n        }\n      }\n    }\n  }\n\n  filter(predicate) {\n    return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));\n  }\n\n  countBy(name) {\n    const batches = this._chunks,\n          numBatches = batches.length;\n    const count_by = typeof name === 'string' ? new Col(name) : name; // Assume that all dictionary batches are deltas, which means that the\n    // last record batch has the most complete dictionary\n\n    count_by.bind(batches[numBatches - 1]);\n    const vector = count_by.vector;\n\n    if (!DataType.isDictionary(vector.type)) {\n      throw new Error('countBy currently only supports dictionary-encoded columns');\n    }\n\n    const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n    const CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n    const counts = new CountsArrayType(vector.dictionary.length);\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      const predicate = this._predicate.bind(batch); // rebind the countBy Col\n\n\n      count_by.bind(batch);\n      const keys = count_by.vector.indices; // yield all indices\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        let key = keys.get(index);\n\n        if (key !== null && predicate(index, batch)) {\n          counts[key]++;\n        }\n      }\n    }\n\n    return new CountByResult(vector.dictionary, IntVector.from(counts));\n  }\n\n}","map":{"version":3,"sources":["compute/dataframe.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}