{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(binaryToString),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(bigNumsToStrings);\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport { DataType } from '../type';\n/** @ignore */\n\nexport var JSONVectorAssembler = /*#__PURE__*/function (_Visitor) {\n  _inherits(JSONVectorAssembler, _Visitor);\n\n  var _super = _createSuper(JSONVectorAssembler);\n\n  function JSONVectorAssembler() {\n    _classCallCheck(this, JSONVectorAssembler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(JSONVectorAssembler, [{\n    key: \"visit\",\n    value: function visit(column) {\n      var data = column.data,\n          name = column.name,\n          length = column.length;\n      var offset = data.offset,\n          nullCount = data.nullCount,\n          nullBitmap = data.nullBitmap;\n      var type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n      var buffers = Object.assign([], data.buffers, _defineProperty({}, BufferType.VALIDITY, undefined));\n      return _objectSpread({\n        'name': name,\n        'count': length,\n        'VALIDITY': DataType.isNull(type) ? undefined : nullCount <= 0 ? Array.from({\n          length: length\n        }, function () {\n          return 1;\n        }) : _toConsumableArray(iterateBits(nullBitmap, offset, length, null, getBit))\n      }, _get(_getPrototypeOf(JSONVectorAssembler.prototype), \"visit\", this).call(this, Vector.new(data.clone(type, offset, length, 0, buffers))));\n    }\n  }, {\n    key: \"visitNull\",\n    value: function visitNull() {\n      return {};\n    }\n  }, {\n    key: \"visitBool\",\n    value: function visitBool(_ref) {\n      var values = _ref.values,\n          offset = _ref.offset,\n          length = _ref.length;\n      return {\n        'DATA': _toConsumableArray(iterateBits(values, offset, length, null, getBool))\n      };\n    }\n  }, {\n    key: \"visitInt\",\n    value: function visitInt(vector) {\n      return {\n        'DATA': vector.type.bitWidth < 64 ? _toConsumableArray(vector.values) : _toConsumableArray(bigNumsToStrings(vector.values, 2))\n      };\n    }\n  }, {\n    key: \"visitFloat\",\n    value: function visitFloat(vector) {\n      return {\n        'DATA': _toConsumableArray(vector.values)\n      };\n    }\n  }, {\n    key: \"visitUtf8\",\n    value: function visitUtf8(vector) {\n      return {\n        'DATA': _toConsumableArray(vector),\n        'OFFSET': _toConsumableArray(vector.valueOffsets)\n      };\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(vector) {\n      return {\n        'DATA': _toConsumableArray(binaryToString(vector)),\n        OFFSET: _toConsumableArray(vector.valueOffsets)\n      };\n    }\n  }, {\n    key: \"visitFixedSizeBinary\",\n    value: function visitFixedSizeBinary(vector) {\n      return {\n        'DATA': _toConsumableArray(binaryToString(vector))\n      };\n    }\n  }, {\n    key: \"visitDate\",\n    value: function visitDate(vector) {\n      return {\n        'DATA': vector.type.unit === DateUnit.DAY ? _toConsumableArray(vector.values) : _toConsumableArray(bigNumsToStrings(vector.values, 2))\n      };\n    }\n  }, {\n    key: \"visitTimestamp\",\n    value: function visitTimestamp(vector) {\n      return {\n        'DATA': _toConsumableArray(bigNumsToStrings(vector.values, 2))\n      };\n    }\n  }, {\n    key: \"visitTime\",\n    value: function visitTime(vector) {\n      return {\n        'DATA': vector.type.unit < TimeUnit.MICROSECOND ? _toConsumableArray(vector.values) : _toConsumableArray(bigNumsToStrings(vector.values, 2))\n      };\n    }\n  }, {\n    key: \"visitDecimal\",\n    value: function visitDecimal(vector) {\n      return {\n        'DATA': _toConsumableArray(bigNumsToStrings(vector.values, 4))\n      };\n    }\n  }, {\n    key: \"visitList\",\n    value: function visitList(vector) {\n      var _this = this;\n\n      return {\n        'OFFSET': _toConsumableArray(vector.valueOffsets),\n        'children': vector.type.children.map(function (f, i) {\n          return _this.visit(new Column(f, [vector.getChildAt(i)]));\n        })\n      };\n    }\n  }, {\n    key: \"visitStruct\",\n    value: function visitStruct(vector) {\n      var _this2 = this;\n\n      return {\n        'children': vector.type.children.map(function (f, i) {\n          return _this2.visit(new Column(f, [vector.getChildAt(i)]));\n        })\n      };\n    }\n  }, {\n    key: \"visitUnion\",\n    value: function visitUnion(vector) {\n      var _this3 = this;\n\n      return {\n        'TYPE': _toConsumableArray(vector.typeIds),\n        'OFFSET': vector.type.mode === UnionMode.Dense ? _toConsumableArray(vector.valueOffsets) : undefined,\n        'children': vector.type.children.map(function (f, i) {\n          return _this3.visit(new Column(f, [vector.getChildAt(i)]));\n        })\n      };\n    }\n  }, {\n    key: \"visitInterval\",\n    value: function visitInterval(vector) {\n      return {\n        'DATA': _toConsumableArray(vector.values)\n      };\n    }\n  }, {\n    key: \"visitFixedSizeList\",\n    value: function visitFixedSizeList(vector) {\n      var _this4 = this;\n\n      return {\n        'children': vector.type.children.map(function (f, i) {\n          return _this4.visit(new Column(f, [vector.getChildAt(i)]));\n        })\n      };\n    }\n  }, {\n    key: \"visitMap\",\n    value: function visitMap(vector) {\n      var _this5 = this;\n\n      return {\n        'OFFSET': _toConsumableArray(vector.valueOffsets),\n        'children': vector.type.children.map(function (f, i) {\n          return _this5.visit(new Column(f, [vector.getChildAt(i)]));\n        })\n      };\n    }\n  }], [{\n    key: \"assemble\",\n    value:\n    /** @nocollapse */\n    function assemble() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n  }]);\n\n  return JSONVectorAssembler;\n}(Visitor);\n/** @ignore */\n\nfunction binaryToString(vector) {\n  var _iterator, _step, octets;\n\n  return _regeneratorRuntime().wrap(function binaryToString$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _iterator = _createForOfIteratorHelper(vector);\n          _context.prev = 1;\n\n          _iterator.s();\n\n        case 3:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 9;\n            break;\n          }\n\n          octets = _step.value;\n          _context.next = 7;\n          return octets.reduce(function (str, byte) {\n            return \"\".concat(str).concat(('0' + (byte & 0xFF).toString(16)).slice(-2));\n          }, '').toUpperCase();\n\n        case 7:\n          _context.next = 3;\n          break;\n\n        case 9:\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](1);\n\n          _iterator.e(_context.t0);\n\n        case 14:\n          _context.prev = 14;\n\n          _iterator.f();\n\n          return _context.finish(14);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 11, 14, 17]]);\n}\n/** @ignore */\n\n\nfunction bigNumsToStrings(values, stride) {\n  var i, n;\n  return _regeneratorRuntime().wrap(function bigNumsToStrings$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          i = -1, n = values.length / stride;\n\n        case 1:\n          if (!(++i < n)) {\n            _context2.next = 6;\n            break;\n          }\n\n          _context2.next = 4;\n          return \"\".concat(BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false));\n\n        case 4:\n          _context2.next = 1;\n          break;\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["visitor/jsonvectorassembler.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: V<T>): { };\n    visitBool                 <T extends Bool>            (vector: V<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: V<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: V<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: V<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: V<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: V<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: V<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: V<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: V<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: V<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: V<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: V<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: V<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: V<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: V<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}