{"ast":null,"code":"import _classCallCheck from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/aurimas/coding/idendro/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Dictionary } from '../type';\nimport { Builder } from '../builder';\n/** @ignore */\n\nexport var DictionaryBuilder = /*#__PURE__*/function (_Builder) {\n  _inherits(DictionaryBuilder, _Builder);\n\n  var _super = _createSuper(DictionaryBuilder);\n\n  function DictionaryBuilder(_ref) {\n    var _this;\n\n    var type = _ref['type'],\n        nulls = _ref['nullValues'],\n        hashFn = _ref['dictionaryHashFunction'];\n\n    _classCallCheck(this, DictionaryBuilder);\n\n    _this = _super.call(this, {\n      type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered)\n    });\n    _this._nulls = null;\n    _this._dictionaryOffset = 0;\n    _this._keysToIndices = Object.create(null);\n    _this.indices = Builder.new({\n      'type': _this.type.indices,\n      'nullValues': nulls\n    });\n    _this.dictionary = Builder.new({\n      'type': _this.type.dictionary,\n      'nullValues': null\n    });\n\n    if (typeof hashFn === 'function') {\n      _this.valueToKey = hashFn;\n    }\n\n    return _this;\n  }\n\n  _createClass(DictionaryBuilder, [{\n    key: \"values\",\n    get: function get() {\n      return this.indices.values;\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      return this.indices.nullCount;\n    }\n  }, {\n    key: \"nullBitmap\",\n    get: function get() {\n      return this.indices.nullBitmap;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      return this.indices.byteLength + this.dictionary.byteLength;\n    }\n  }, {\n    key: \"reservedLength\",\n    get: function get() {\n      return this.indices.reservedLength + this.dictionary.reservedLength;\n    }\n  }, {\n    key: \"reservedByteLength\",\n    get: function get() {\n      return this.indices.reservedByteLength + this.dictionary.reservedByteLength;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      return this.indices.isValid(value);\n    }\n  }, {\n    key: \"setValid\",\n    value: function setValid(index, valid) {\n      var indices = this.indices;\n      valid = indices.setValid(index, valid);\n      this.length = indices.length;\n      return valid;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      var keysToIndices = this._keysToIndices;\n      var key = this.valueToKey(value);\n      var idx = keysToIndices[key];\n\n      if (idx === undefined) {\n        keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n      }\n\n      return this.indices.setValue(index, idx);\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var type = this.type;\n      var prev = this._dictionary;\n      var curr = this.dictionary.toVector();\n      var data = this.indices.flush().clone(type);\n      data.dictionary = prev ? prev.concat(curr) : curr;\n      this.finished || (this._dictionaryOffset += curr.length);\n      this._dictionary = data.dictionary;\n      this.clear();\n      return data;\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this.indices.finish();\n      this.dictionary.finish();\n      this._dictionaryOffset = 0;\n      this._keysToIndices = Object.create(null);\n      return _get(_getPrototypeOf(DictionaryBuilder.prototype), \"finish\", this).call(this);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.indices.clear();\n      this.dictionary.clear();\n      return _get(_getPrototypeOf(DictionaryBuilder.prototype), \"clear\", this).call(this);\n    }\n  }, {\n    key: \"valueToKey\",\n    value: function valueToKey(val) {\n      return typeof val === 'string' ? val : \"\".concat(val);\n    }\n  }]);\n\n  return DictionaryBuilder;\n}(Builder);","map":{"version":3,"sources":["builder/dictionary.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}